#include <iostream>
#include "betaSM.hpp"
// #include "mr.hpp"


// // index_t CouplingsPowers(size_t pocoa1_, size_t pocoa2_, size_t pocoas_, size_t pocoat_, size_t pocoab_, size_t pocoatau_, size_t pocolam_)
// {
//   index_t v;
//   v.push_back(pocoa1_);
//   v.push_back(pocoa2_);
//   v.push_back(pocoas_);
//   v.push_back(pocoat_);
//   v.push_back(pocoab_);
//   v.push_back(pocoatau_);
//   v.push_back(pocolam_);
//   return v;
// }


void BetaSMFull::add(std::map<index_t, long double, index_cmp_t>& m, size_t p, size_t ia1, size_t ia2, size_t ias, size_t iat, size_t iab, size_t iatau, size_t ilam, long double c)
{
  if (ia1 + ia2 + ias + iat + iab + iatau + ilam <= p + 2 ) // 
    {
      if ((pocoa1 < 0 ) && (ia1 > 0))
        return;
      if ((pocoa2 < 0 ) && (ia2 > 0))
        return;
      if ((pocoa3 < 0 ) && (ias > 0))
        return;
      if ((pocoa4 < 0 ) && (iat > 0))
        return;
      if ((pocoa5 < 0 ) && (iab > 0))
        return;
      if ((pocoa6 < 0 ) && (iatau > 0))
        return;
      if ((pocoa7 < 0 ) && (ilam > 0))
        return;

      index_t v(7);
      v[0] = ia1;
      v[1] = ia2;
      v[2] = ias;
      v[3] = iat;
      v[4] = iab;
      v[5] = iatau;
      v[6] = ilam;
      
      m[v] = c;
    }
}


BetaSMFull::BetaSMFull(int pocoa1_, int pocoa2_, int pocoas_, int pocoat_, int pocoab_, int pocoatau_, int pocolam_,int NG_) : NG(NG_), pocoa1(pocoa1_), pocoa2(pocoa2_), pocoa3(pocoas_), pocoa4(pocoat_), pocoa5(pocoab_), pocoa6(pocoatau_), pocoa7(pocolam_)
{
  // * a1
  add(be1, pocoa1, 2, 0, 0, 0, 0, 0, 0, 1/10. + (4/3.) * (NG));
  add(be1, pocoa1, 2, 0, 0, 0, 0, 0, 2, -9/5.);
  add(be1, pocoa1, 2, 0, 0, 0, 0, 1, 0, -3/2.);
  add(be1, pocoa1, 2, 0, 0, 0, 0, 2, 0, 459/80.);
  add(be1, pocoa1, 2, 0, 0, 0, 1, 0, 0, -1/2.);
  add(be1, pocoa1, 2, 0, 0, 0, 1, 1, 0, 157/20.);
  add(be1, pocoa1, 2, 0, 0, 0, 2, 0, 0, 57/16.);
  add(be1, pocoa1, 2, 0, 0, 1, 0, 0, 0, -17/10.);
  add(be1, pocoa1, 2, 0, 0, 1, 0, 1, 0, 199/20.);
  add(be1, pocoa1, 2, 0, 0, 1, 1, 0, 0, 369/40.);
  add(be1, pocoa1, 2, 0, 0, 2, 0, 0, 0, 189/16.);
  add(be1, pocoa1, 2, 0, 1, 0, 0, 0, 0, (44/15.) * (NG));
  add(be1, pocoa1, 2, 0, 1, 0, 1, 0, 0, -17/5.);
  add(be1, pocoa1, 2, 0, 1, 1, 0, 0, 0, -29/5.);
  add(be1, pocoa1, 2, 0, 2, 0, 0, 0, 0, (275/9.) * (NG) + (-484/135.) * (pow(NG,2)));
  add(be1, pocoa1, 2, 1, 0, 0, 0, 0, 0, 9/10. + (3/5.) * (NG));
  add(be1, pocoa1, 2, 1, 0, 0, 0, 0, 1, 9/10.);
  add(be1, pocoa1, 2, 1, 0, 0, 0, 1, 0, -1629/160.);
  add(be1, pocoa1, 2, 1, 0, 0, 1, 0, 0, -1311/160.);
  add(be1, pocoa1, 2, 1, 0, 1, 0, 0, 0, -471/32.);
  add(be1, pocoa1, 2, 1, 1, 0, 0, 0, 0, (-1/5.) * (NG));
  add(be1, pocoa1, 2, 2, 0, 0, 0, 0, 0, 3401/320. + (83/30.) * (NG) + (-11/15.) * (pow(NG,2)));
  add(be1, pocoa1, 3, 0, 0, 0, 0, 0, 0, 9/50. + (19/15.) * (NG));
  add(be1, pocoa1, 3, 0, 0, 0, 0, 0, 1, 27/50.);
  add(be1, pocoa1, 3, 0, 0, 0, 0, 1, 0, -2529/800.);
  add(be1, pocoa1, 3, 0, 0, 0, 1, 0, 0, -1267/800.);
  add(be1, pocoa1, 3, 0, 0, 1, 0, 0, 0, -2827/800.);
  add(be1, pocoa1, 3, 0, 1, 0, 0, 0, 0, (-137/225.) * (NG));
  add(be1, pocoa1, 3, 1, 0, 0, 0, 0, 0, 783/800. + (-7/100.) * (NG));
  add(be1, pocoa1, 4, 0, 0, 0, 0, 0, 0, 489/8000. + (-58/75.) * (NG) + (-209/135.) * (pow(NG,2)));

  // * a2
  add(be2, pocoa2, 0, 2, 0, 0, 0, 0, 0, -43/6. + (4/3.) * (NG));
  add(be2, pocoa2, 0, 2, 0, 0, 0, 0, 2, -3);
  add(be2, pocoa2, 0, 2, 0, 0, 0, 1, 0, -1/2.);
  add(be2, pocoa2, 0, 2, 0, 0, 0, 2, 0, 29/16.);
  add(be2, pocoa2, 0, 2, 0, 0, 1, 0, 0, -3/2.);
  add(be2, pocoa2, 0, 2, 0, 0, 1, 1, 0, 15/4.);
  add(be2, pocoa2, 0, 2, 0, 0, 2, 0, 0, 147/16.);
  add(be2, pocoa2, 0, 2, 0, 1, 0, 0, 0, -3/2.);
  add(be2, pocoa2, 0, 2, 0, 1, 0, 1, 0, 15/4.);
  add(be2, pocoa2, 0, 2, 0, 1, 1, 0, 0, 117/8.);
  add(be2, pocoa2, 0, 2, 0, 2, 0, 0, 0, 147/16.);
  add(be2, pocoa2, 0, 2, 1, 0, 0, 0, 0, (4) * (NG));
  add(be2, pocoa2, 0, 2, 1, 0, 1, 0, 0, -7);
  add(be2, pocoa2, 0, 2, 1, 1, 0, 0, 0, -7);
  add(be2, pocoa2, 0, 2, 2, 0, 0, 0, 0, (125/3.) * (NG) + (-44/9.) * (pow(NG,2)));
  add(be2, pocoa2, 0, 3, 0, 0, 0, 0, 0, -259/6. + (49/3.) * (NG));
  add(be2, pocoa2, 0, 3, 0, 0, 0, 0, 1, 3/2.);
  add(be2, pocoa2, 0, 3, 0, 0, 0, 1, 0, -243/32.);
  add(be2, pocoa2, 0, 3, 0, 0, 1, 0, 0, -729/32.);
  add(be2, pocoa2, 0, 3, 0, 1, 0, 0, 0, -729/32.);
  add(be2, pocoa2, 0, 3, 1, 0, 0, 0, 0, (13) * (NG));
  add(be2, pocoa2, 0, 4, 0, 0, 0, 0, 0, -667111/1728. + (6412/27.) * (NG) + (-415/27.) * (pow(NG,2)));
  add(be2, pocoa2, 1, 2, 0, 0, 0, 0, 0, 3/10. + (1/5.) * (NG));
  add(be2, pocoa2, 1, 2, 0, 0, 0, 0, 1, 3/10.);
  add(be2, pocoa2, 1, 2, 0, 0, 0, 1, 0, -51/32.);
  add(be2, pocoa2, 1, 2, 0, 0, 1, 0, 0, -533/160.);
  add(be2, pocoa2, 1, 2, 0, 1, 0, 0, 0, -593/160.);
  add(be2, pocoa2, 1, 2, 1, 0, 0, 0, 0, (-1/15.) * (NG));
  add(be2, pocoa2, 1, 3, 0, 0, 0, 0, 0, 561/160. + (13/20.) * (NG));
  add(be2, pocoa2, 2, 2, 0, 0, 0, 0, 0, 163/1600. + (-7/15.) * (NG) + (-11/45.) * (pow(NG,2)));

  // * as
  add(be3, pocoa3, 0, 0, 2, 0, 0, 0, 0, -11 + (4/3.) * (NG));
  add(be3, pocoa3, 0, 0, 2, 0, 1, 0, 0, -2);
  add(be3, pocoa3, 0, 0, 2, 0, 1, 1, 0, 7/2.);
  add(be3, pocoa3, 0, 0, 2, 0, 2, 0, 0, 15);
  add(be3, pocoa3, 0, 0, 2, 1, 0, 0, 0, -2);
  add(be3, pocoa3, 0, 0, 2, 1, 0, 1, 0, 7/2.);
  add(be3, pocoa3, 0, 0, 2, 1, 1, 0, 0, 18);
  add(be3, pocoa3, 0, 0, 2, 2, 0, 0, 0, 15);
  add(be3, pocoa3, 0, 0, 3, 0, 0, 0, 0, -102 + (76/3.) * (NG));
  add(be3, pocoa3, 0, 0, 3, 0, 1, 0, 0, -40);
  add(be3, pocoa3, 0, 0, 3, 1, 0, 0, 0, -40);
  add(be3, pocoa3, 0, 0, 4, 0, 0, 0, 0, -2857/2. + (5033/9.) * (NG) + (-650/27.) * (pow(NG,2)));
  add(be3, pocoa3, 0, 1, 2, 0, 0, 0, 0, (3/2.) * (NG));
  add(be3, pocoa3, 0, 1, 2, 0, 1, 0, 0, -93/8.);
  add(be3, pocoa3, 0, 1, 2, 1, 0, 0, 0, -93/8.);
  add(be3, pocoa3, 0, 1, 3, 0, 0, 0, 0, (7) * (NG));
  add(be3, pocoa3, 0, 2, 2, 0, 0, 0, 0, (241/24.) * (NG) + (-11/6.) * (pow(NG,2)));
  add(be3, pocoa3, 1, 0, 2, 0, 0, 0, 0, (11/30.) * (NG));
  add(be3, pocoa3, 1, 0, 2, 0, 1, 0, 0, -89/40.);
  add(be3, pocoa3, 1, 0, 2, 1, 0, 0, 0, -101/40.);
  add(be3, pocoa3, 1, 0, 3, 0, 0, 0, 0, (77/45.) * (NG));
  add(be3, pocoa3, 1, 1, 2, 0, 0, 0, 0, (-1/40.) * (NG));
  add(be3, pocoa3, 2, 0, 2, 0, 0, 0, 0, (-13/120.) * (NG) + (-121/270.) * (pow(NG,2)));

  // * at  
  add(be4, pocoa4, 0, 0, 0, 1, 0, 0, 2, 6);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 0, 3, -36);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 1, 0, 1);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 1, 2, -45/2.);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 2, 0, -9/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 2, 1, 15);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 3, 0, 71/16. + (3) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 1, 1, 0, 0, 3/2.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 0, 2, -291/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 1, 0, 5/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 2, 0, 53/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 0, 0, -1/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 0, 1, 15);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 1, 0, 22);
  add(be4, pocoa4, 0, 0, 0, 1, 3, 0, 0, 477/16. + (9/2.) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 0, 9/2.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 1, -12);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 2, 15/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 1, 0, -9/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 1, 1, 30);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 2, 0, 207/8.);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 0, 0, -11/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 0, 1, 93);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 1, 0, 7/2.);
  add(be4, pocoa4, 0, 0, 0, 2, 2, 0, 0, 825/8. + (-48) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 3, 0, 0, 0, -12);
  add(be4, pocoa4, 0, 0, 0, 3, 0, 0, 1, 198);
  add(be4, pocoa4, 0, 0, 0, 3, 0, 1, 0, 21/2.);
  add(be4, pocoa4, 0, 0, 0, 3, 1, 0, 0, 739/16.);
  add(be4, pocoa4, 0, 0, 0, 4, 0, 0, 0, 339/8. + (27/2.) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 1, 0, 0, 0, -8);
  add(be4, pocoa4, 0, 0, 1, 1, 1, 0, 0, 4);
  add(be4, pocoa4, 0, 0, 1, 1, 1, 1, 0, -43/6.);
  add(be4, pocoa4, 0, 0, 1, 1, 2, 0, 0, 82 + (-64) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 2, 0, 0, 0, 36);
  add(be4, pocoa4, 0, 0, 1, 2, 0, 0, 1, 16);
  add(be4, pocoa4, 0, 0, 1, 2, 0, 1, 0, 5/2.);
  add(be4, pocoa4, 0, 0, 1, 2, 1, 0, 0, 27 + (-32) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 3, 0, 0, 0, -157);
  add(be4, pocoa4, 0, 0, 2, 1, 0, 0, 0, -404/3. + (80/9.) * (NG));
  add(be4, pocoa4, 0, 0, 2, 1, 1, 0, 0, -277/2. + (-14/3.) * (NG) + (-44) * (Zeta3));
  add(be4, pocoa4, 0, 0, 2, 2, 0, 0, 0, 4799/6. + (-54) * (NG) + (-228) * (Zeta3));
  add(be4, pocoa4, 0, 0, 3, 1, 0, 0, 0, -2498 + (8864/27.) * (NG) + (1120/81.) * (pow(NG,2)) + (640/3.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 1, 0, 1, 0, 0, 0, -9/4.);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 0, 2, 45);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 1, 0, 15/8.);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 2, 0, -315/16. + (9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 1, 1, 0, 0, 99/16.);
  add(be4, pocoa4, 0, 1, 0, 1, 1, 1, 0, -153/8. + (9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 1, 2, 0, 0, -2283/32. + (63/2.) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 2, 0, 0, 0, 225/16.);
  add(be4, pocoa4, 0, 1, 0, 2, 0, 0, 1, -135/2.);
  add(be4, pocoa4, 0, 1, 0, 2, 0, 1, 0, -81/4. + (-9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 2, 1, 0, 0, -2307/32. + (-9/2.) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 3, 0, 0, 0, -1593/16.);
  add(be4, pocoa4, 0, 1, 1, 1, 0, 0, 0, 9);
  add(be4, pocoa4, 0, 1, 1, 1, 1, 0, 0, -27/2. + (-108) * (Zeta3));
  add(be4, pocoa4, 0, 1, 1, 2, 0, 0, 0, -168 + (180) * (Zeta3));
  add(be4, pocoa4, 0, 1, 2, 1, 0, 0, 0, 531/4. + (38) * (NG) + (-48) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 2, 0, 1, 0, 0, 0, -35/4. + NG);
  add(be4, pocoa4, 0, 2, 0, 1, 0, 0, 1, -171/16.);
  add(be4, pocoa4, 0, 2, 0, 1, 0, 1, 0, 2121/128. + (-21/8.) * (NG) + (-81/4.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 0, 1, 1, 0, 0, 13653/256. + (-69/16.) * (NG) + (-225/8.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 0, 2, 0, 0, 0, 49239/256. + (-351/16.) * (NG) + (-729/8.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 1, 1, 0, 0, 0, 66 + (57/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 3, 0, 1, 0, 0, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 1, 0, 0, 1, 0, 0, 0, -17/20.);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 0, 2, 9);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 1, 0, 15/8.);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 2, 0, -27/16. + (-27/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 1, 1, 0, 0, 7/80.);
  add(be4, pocoa4, 1, 0, 0, 1, 1, 1, 0, 491/120. + (-27/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 1, 2, 0, 0, -959/160. + (19/10.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 2, 0, 0, 0, 393/80.);
  add(be4, pocoa4, 1, 0, 0, 2, 0, 0, 1, -127/10.);
  add(be4, pocoa4, 1, 0, 0, 2, 0, 1, 0, -63/5. + (24/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 2, 1, 0, 0, -1383/160. + (1/2.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 3, 0, 0, 0, -2437/80.);
  add(be4, pocoa4, 1, 0, 1, 1, 0, 0, 0, 19/15.);
  add(be4, pocoa4, 1, 0, 1, 1, 1, 0, 0, -457/30. + (-28/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 1, 2, 0, 0, 0, -126/5. + (36) * (Zeta3));
  add(be4, pocoa4, 1, 0, 2, 1, 0, 0, 0, -127/60. + (88/9.) * (NG) + (-176/15.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 1, 1, 0, 1, 0, 0, 0, -9/20.);
  add(be4, pocoa4, 1, 1, 0, 1, 0, 0, 1, 117/40.);
  add(be4, pocoa4, 1, 1, 0, 1, 0, 1, 0, -1041/320. + (-9/5.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 0, 1, 1, 0, 0, 747/128. + (27/10.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 0, 2, 0, 0, 0, 8097/640. + (369/20.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 1, 1, 0, 0, 0, -321/20.);
  add(be4, pocoa4, 1, 2, 0, 1, 0, 0, 0, 927/320. + (-9/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 2, 0, 0, 1, 0, 0, 0, 9/200. + (29/45.) * (NG));
  add(be4, pocoa4, 2, 0, 0, 1, 0, 0, 1, -1089/400.);
  add(be4, pocoa4, 2, 0, 0, 1, 0, 1, 0, -4043/640. + (-117/40.) * (NG) + (-807/100.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 0, 1, 1, 0, 0, -35153/19200. + (-23/240.) * (NG) + (-199/200.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 0, 2, 0, 0, 0, -44179/19200. + (-115/16.) * (NG) + (-93/200.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 1, 1, 0, 0, 0, -1187/300. + (5281/900.) * (NG) + (-748/75.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 2, 1, 0, 1, 0, 0, 0, 3243/1600. + (241/400.) * (NG) + (-153/200.) * (Zeta3) + (-51/25.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 3, 0, 0, 1, 0, 0, 0, 18103/24000. + (53413/10800.) * (NG) + (146/81.) * (pow(NG,2)) + (-153/1000.) * (Zeta3) + (-323/75.) * ((NG) * (Zeta3)));

  // * ab
  add(be5, pocoa5, 0, 0, 0, 0, 1, 0, 2, 6);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 0, 3, -36);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 1, 0, 1);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 1, 2, -45/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 2, 0, -9/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 2, 1, 15);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 3, 0, 71/16. + (3) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 0, 9/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 1, -12);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 2, 15/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 1, 0, -9/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 1, 1, 30);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 2, 0, 207/8.);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 0, 0, -12);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 0, 1, 198);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 1, 0, 21/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 4, 0, 0, 339/8. + (27/2.) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 1, 1, 0, 0, 3/2.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 0, 2, -291/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 1, 0, 5/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 2, 0, 53/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 0, 0, -11/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 0, 1, 93);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 1, 0, 7/2.);
  add(be5, pocoa5, 0, 0, 0, 1, 3, 0, 0, 739/16.);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 0, 0, -1/4.);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 0, 1, 15);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 1, 0, 22);
  add(be5, pocoa5, 0, 0, 0, 2, 2, 0, 0, 825/8. + (-48) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 3, 1, 0, 0, 477/16. + (9/2.) * (Zeta3));
  add(be5, pocoa5, 0, 0, 1, 0, 1, 0, 0, -8);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 0, 0, 36);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 0, 1, 16);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 1, 0, 5/2.);
  add(be5, pocoa5, 0, 0, 1, 0, 3, 0, 0, -157);
  add(be5, pocoa5, 0, 0, 1, 1, 1, 0, 0, 4);
  add(be5, pocoa5, 0, 0, 1, 1, 1, 1, 0, -43/6.);
  add(be5, pocoa5, 0, 0, 1, 1, 2, 0, 0, 27 + (-32) * (Zeta3));
  add(be5, pocoa5, 0, 0, 1, 2, 1, 0, 0, 82 + (-64) * (Zeta3));
  add(be5, pocoa5, 0, 0, 2, 0, 1, 0, 0, -404/3. + (80/9.) * (NG));
  add(be5, pocoa5, 0, 0, 2, 0, 2, 0, 0, 4799/6. + (-54) * (NG) + (-228) * (Zeta3));
  add(be5, pocoa5, 0, 0, 2, 1, 1, 0, 0, -277/2. + (-14/3.) * (NG) + (-44) * (Zeta3));
  add(be5, pocoa5, 0, 0, 3, 0, 1, 0, 0, -2498 + (8864/27.) * (NG) + (1120/81.) * (pow(NG,2)) + (640/3.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 1, 0, 0, 1, 0, 0, -9/4.);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 0, 2, 45);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 1, 0, 15/8.);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 2, 0, -315/16. + (9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 0, 2, 0, 0, 225/16.);
  add(be5, pocoa5, 0, 1, 0, 0, 2, 0, 1, -135/2.);
  add(be5, pocoa5, 0, 1, 0, 0, 2, 1, 0, -81/4. + (-9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 0, 3, 0, 0, -1593/16.);
  add(be5, pocoa5, 0, 1, 0, 1, 1, 0, 0, 99/16.);
  add(be5, pocoa5, 0, 1, 0, 1, 1, 1, 0, -153/8. + (9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 1, 2, 0, 0, -2307/32. + (-9/2.) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 2, 1, 0, 0, -2283/32. + (63/2.) * (Zeta3));
  add(be5, pocoa5, 0, 1, 1, 0, 1, 0, 0, 9);
  add(be5, pocoa5, 0, 1, 1, 0, 2, 0, 0, -168 + (180) * (Zeta3));
  add(be5, pocoa5, 0, 1, 1, 1, 1, 0, 0, -27/2. + (-108) * (Zeta3));
  add(be5, pocoa5, 0, 1, 2, 0, 1, 0, 0, 531/4. + (38) * (NG) + (-48) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 2, 0, 0, 1, 0, 0, -35/4. + NG);
  add(be5, pocoa5, 0, 2, 0, 0, 1, 0, 1, -171/16.);
  add(be5, pocoa5, 0, 2, 0, 0, 1, 1, 0, 4041/128. + (-21/8.) * (NG) + (-99/4.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 0, 0, 2, 0, 0, 49239/256. + (-351/16.) * (NG) + (-729/8.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 0, 1, 1, 0, 0, 13653/256. + (-69/16.) * (NG) + (-225/8.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 1, 0, 1, 0, 0, 66 + (57/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 3, 0, 0, 1, 0, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 1, 0, 0, 0, 1, 0, 0, -1/4.);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 0, 2, 9);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 1, 0, 15/8.);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 2, 0, -27/16. + (-27/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 0, 2, 0, 0, 237/80.);
  add(be5, pocoa5, 1, 0, 0, 0, 2, 0, 1, -139/10.);
  add(be5, pocoa5, 1, 0, 0, 0, 2, 1, 0, -137/10. + (21/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 0, 3, 0, 0, -1981/80.);
  add(be5, pocoa5, 1, 0, 0, 1, 1, 0, 0, 91/80.);
  add(be5, pocoa5, 1, 0, 0, 1, 1, 1, 0, 293/120. + (-18/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 1, 2, 0, 0, -4203/160. + (77/10.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 2, 1, 0, 0, -363/160. + (-17/10.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 1, 0, 1, 0, 0, 31/15.);
  add(be5, pocoa5, 1, 0, 1, 0, 2, 0, 0, -18 + (132/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 1, 1, 1, 0, 0, -161/6. + (4) * (Zeta3));
  add(be5, pocoa5, 1, 0, 2, 0, 1, 0, 0, 2453/60. + (428/45.) * (NG) + (-176/15.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 1, 1, 0, 0, 1, 0, 0, -27/20.);
  add(be5, pocoa5, 1, 1, 0, 0, 1, 0, 1, -27/40.);
  add(be5, pocoa5, 1, 1, 0, 0, 1, 1, 0, -1233/320. + (54/5.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 0, 0, 2, 0, 0, 8493/640. + (-9/5.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 0, 1, 1, 0, 0, 3267/640. + (189/20.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 1, 0, 1, 0, 0, -153/20.);
  add(be5, pocoa5, 1, 2, 0, 0, 1, 0, 0, -681/64. + (231/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 2, 0, 0, 0, 1, 0, 0, -29/200. + (-1/45.) * (NG));
  add(be5, pocoa5, 2, 0, 0, 0, 1, 0, 1, -9/16.);
  add(be5, pocoa5, 2, 0, 0, 0, 1, 1, 0, -17159/3200. + (-117/40.) * (NG) + (351/100.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 0, 0, 2, 0, 0, 2741/19200. + (-59/16.) * (NG) + (-171/200.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 0, 1, 1, 0, 0, -47369/19200. + (-239/240.) * (NG) + (-13/200.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 1, 0, 1, 0, 0, -449/300. + (-899/900.) * (NG) + (-44/15.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 2, 1, 0, 0, 1, 0, 0, 2763/1600. + (661/400.) * (NG) + (-9/40.) * (Zeta3) + (-3/5.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 3, 0, 0, 0, 1, 0, 0, 6383/24000. + (16201/10800.) * (NG) + (62/81.) * (pow(NG,2)) + (-9/200.) * (Zeta3) + (-19/15.) * ((NG) * (Zeta3)));

  // * atau
  add(be6, pocoa6, 0, 0, 0, 0, 0, 1, 2, 6);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 1, 3, -36);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 0, 5/2.);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 1, -12);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 2, 195/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 3, 0, -3);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 3, 1, 108);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 4, 0, -10 + (15/2.) * (Zeta3));
  add(be6, pocoa6, 0, 0, 0, 0, 1, 1, 0, 3);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 1, 2, -135/2.);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 2, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 2, 1, 90);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 3, 0, 9);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 1, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 1, 1, 45);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 2, 0, 279/8.);
  add(be6, pocoa6, 0, 0, 0, 0, 3, 1, 0, 789/16. + (9) * (Zeta3));
  add(be6, pocoa6, 0, 0, 0, 1, 0, 1, 0, 3);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 1, 2, -135/2.);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 2, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 2, 1, 90);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 3, 0, 9);
  add(be6, pocoa6, 0, 0, 0, 1, 1, 1, 0, 3/2.);
  add(be6, pocoa6, 0, 0, 0, 1, 1, 2, 0, -87/4.);
  add(be6, pocoa6, 0, 0, 0, 1, 2, 1, 0, 831/16.);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 1, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 1, 1, 45);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 2, 0, 279/8.);
  add(be6, pocoa6, 0, 0, 0, 2, 1, 1, 0, 831/16.);
  add(be6, pocoa6, 0, 0, 0, 3, 0, 1, 0, 789/16. + (9) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 0, 1, 1, 0, 20);
  add(be6, pocoa6, 0, 0, 1, 0, 1, 2, 0, -96 + (72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 0, 2, 1, 0, 15/2. + (-72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 1, 0, 1, 0, 20);
  add(be6, pocoa6, 0, 0, 1, 1, 0, 2, 0, -96 + (72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 1, 1, 1, 0, 57 + (-48) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 2, 0, 1, 0, 15/2. + (-72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 2, 0, 1, 1, 0, 910/3. + (-32) * (NG) + (-24) * (Zeta3));
  add(be6, pocoa6, 0, 0, 2, 1, 0, 1, 0, 910/3. + (-32) * (NG) + (-24) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 0, 0, 1, 0, -9/4.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 1, 2, 45);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 2, 0, 165/16.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 2, 1, -135/2.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 3, 0, -531/16.);
  add(be6, pocoa6, 0, 1, 0, 0, 1, 1, 0, 45/8.);
  add(be6, pocoa6, 0, 1, 0, 0, 1, 2, 0, -135/4. + (-27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 0, 2, 1, 0, -1161/16. + (27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 1, 0, 1, 0, 45/8.);
  add(be6, pocoa6, 0, 1, 0, 1, 0, 2, 0, -135/4. + (-27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 1, 1, 1, 0, -387/8.);
  add(be6, pocoa6, 0, 1, 0, 2, 0, 1, 0, -1161/16. + (27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 1, 0, 1, 1, 0, -489/4. + (108) * (Zeta3));
  add(be6, pocoa6, 0, 1, 1, 1, 0, 1, 0, -489/4. + (108) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 0, 0, 1, 0, -35/4. + NG);
  add(be6, pocoa6, 0, 2, 0, 0, 0, 1, 1, -171/16.);
  add(be6, pocoa6, 0, 2, 0, 0, 0, 2, 0, 33075/256. + (-267/16.) * (NG) + (-333/8.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 0, 1, 1, 0, 12123/128. + (-63/8.) * (NG) + (-297/4.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 1, 0, 1, 0, 6363/128. + (-63/8.) * (NG) + (-243/4.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 1, 0, 0, 1, 0, (117/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 0, 3, 0, 0, 0, 1, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 1, 0, 0, 0, 0, 1, 0, -9/4.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 1, 2, 9);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 2, 0, 537/80.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 2, 1, -99/10.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 3, 0, -459/16.);
  add(be6, pocoa6, 1, 0, 0, 0, 1, 1, 0, 5/8.);
  add(be6, pocoa6, 1, 0, 0, 0, 1, 2, 0, -87/20. + (-9/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 0, 2, 1, 0, -1233/80. + (27/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 1, 0, 1, 0, 17/8.);
  add(be6, pocoa6, 1, 0, 0, 1, 0, 2, 0, -231/20. + (18/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 1, 1, 1, 0, -417/40. + (24/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 2, 0, 1, 0, -957/80. + (-9/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 1, 0, 1, 1, 0, -991/60. + (12) * (Zeta3));
  add(be6, pocoa6, 1, 0, 1, 1, 0, 1, 0, -2419/60. + (204/5.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 0, 0, 1, 0, 27/20.);
  add(be6, pocoa6, 1, 1, 0, 0, 0, 1, 1, 261/40.);
  add(be6, pocoa6, 1, 1, 0, 0, 0, 2, 0, -2727/640. + (351/10.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 0, 1, 1, 0, 5469/320. + (-27/5.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 1, 0, 1, 0, 3417/320. + (-297/10.) * (Zeta3));
  add(be6, pocoa6, 1, 2, 0, 0, 0, 1, 0, 7371/320. + (-369/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 2, 0, 0, 0, 0, 1, 0, 51/200. + (11/5.) * (NG));
  add(be6, pocoa6, 2, 0, 0, 0, 0, 1, 1, -621/80.);
  add(be6, pocoa6, 2, 0, 0, 0, 0, 2, 0, 5463/1280. + (-819/80.) * (NG) + (-27/8.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 0, 0, 1, 1, 0, -32191/9600. + (-31/40.) * (NG) + (-87/100.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 0, 1, 0, 1, 0, -3055/384. + (-127/40.) * (NG) + (-3471/100.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 1, 0, 0, 1, 0, (2409/100.) * (NG) + (-132/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 2, 1, 0, 0, 0, 1, 0, 3807/1600. + (261/400.) * (NG) + (-81/40.) * (Zeta3) + (-27/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 3, 0, 0, 0, 0, 1, 0, -12119/8000. + (15769/1200.) * (NG) + (38/9.) * (pow(NG,2)) + (-81/200.) * (Zeta3) + (-57/5.) * ((NG) * (Zeta3)));

  // * alam
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 2, 12);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 3, -156);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 4, 3588 + (2016) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 1, 2);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 2, -24);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 3, 291);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 0, -1);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 1, -1/2.);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 2, 717/2. + (252) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 3, 0, 5);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 3, 1, -1241/8. + (-66) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 4, 0, -143/8. + (-12) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 1, 6);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 2, -72);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 3, 873);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 1, 2, -216);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 2, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 3, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 1, -3/2.);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 2, 1719/2. + (756) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 2, 1, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 2, 0, -72);
  add(be7, pocoa7, 0, 0, 0, 0, 3, 0, 0, 15);
  add(be7, pocoa7, 0, 0, 0, 0, 3, 0, 1, 117/8. + (-198) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 3, 1, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 0, 4, 0, 0, -1599/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 1, 6);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 2, -72);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 3, 873);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 1, 2, -216);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 2, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 3, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 0, 1, -21);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 0, 2, 117 + (-864) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 1, 1, 1, 21);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 2, 0, 12);
  add(be7, pocoa7, 0, 0, 0, 1, 2, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 1, 2, 0, 1, 6399/8. + (144) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 2, 1, 0, 45/8.);
  add(be7, pocoa7, 0, 0, 0, 1, 3, 0, 0, -717/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 1, -3/2.);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 2, 1719/2. + (756) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 0, 1, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 2, 0, -72);
  add(be7, pocoa7, 0, 0, 0, 2, 1, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 2, 1, 0, 1, 6399/8. + (144) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 1, 1, 0, 45/8.);
  add(be7, pocoa7, 0, 0, 0, 2, 2, 0, 0, (72) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 3, 0, 0, 0, 15);
  add(be7, pocoa7, 0, 0, 0, 3, 0, 0, 1, 117/8. + (-198) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 3, 0, 1, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 3, 1, 0, 0, -717/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 4, 0, 0, 0, -1599/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 1, 0, 1, 40);
  add(be7, pocoa7, 0, 0, 1, 0, 1, 0, 2, -1224 + (1152) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 2, 0, 0, -16);
  add(be7, pocoa7, 0, 0, 1, 0, 2, 0, 1, 895 + (-1296) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 3, 0, 0, -38 + (240) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 0, 0, 1, 40);
  add(be7, pocoa7, 0, 0, 1, 1, 0, 0, 2, -1224 + (1152) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 1, 0, 1, 82 + (-96) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 2, 0, 0, -2 + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 2, 0, 0, 0, -16);
  add(be7, pocoa7, 0, 0, 1, 2, 0, 0, 1, 895 + (-1296) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 2, 1, 0, 0, -2 + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 3, 0, 0, 0, -38 + (240) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 0, 1, 0, 1, 1820/3. + (-64) * (NG) + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 0, 2, 0, 0, -626/3. + (40) * (NG) + (32) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 1, 0, 0, 1, 1820/3. + (-64) * (NG) + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 1, 1, 0, 0, 192);
  add(be7, pocoa7, 0, 0, 2, 2, 0, 0, 0, -626/3. + (40) * (NG) + (32) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 1, -9/2.);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 2, 54);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 3, -474 + (72) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 1, 1, 15/4.);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 1, 2, 213/4. + (-144) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 2, 1, -1587/8. + (171) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 3, 0, 1137/32. + (-9) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 1, 0, 1, 45/4.);
  add(be7, pocoa7, 0, 1, 0, 0, 1, 0, 2, 639/4. + (-432) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 1, 1, 1, -27);
  add(be7, pocoa7, 0, 1, 0, 0, 2, 0, 1, -4977/8. + (513) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 3, 0, 0, 3411/32. + (-27) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 0, 0, 1, 45/4.);
  add(be7, pocoa7, 0, 1, 0, 1, 0, 0, 2, 639/4. + (-432) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 0, 1, 1, -27);
  add(be7, pocoa7, 0, 1, 0, 1, 1, 0, 1, -531/4. + (54) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 2, 0, 0, 477/32.);
  add(be7, pocoa7, 0, 1, 0, 2, 0, 0, 1, -4977/8. + (513) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 2, 1, 0, 0, 477/32.);
  add(be7, pocoa7, 0, 1, 0, 3, 0, 0, 0, 3411/32. + (-27) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 0, 1, 0, 1, -489/2. + (216) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 0, 2, 0, 0, -31/2. + (24) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 1, 0, 0, 1, -489/2. + (216) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 1, 1, 0, 0, -8 + (96) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 2, 0, 0, 0, -31/2. + (24) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 0, 9/16.);
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 1, -313/16. + (5) * (NG));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 2, 1995/8. + (-141) * (NG) + (-513) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 1, 0, -3/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 0, 1, 1, -1311/64. + (-21/4.) * (NG) + (-117/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 2, 0, 4503/128. + (-13/4.) * (NG) + (-273/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 1, 0, 0, -9/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 1, 0, 1, -3933/64. + (-63/4.) * (NG) + (-351/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 1, 1, 0, 9/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 2, 0, 0, 13653/128. + (-39/4.) * (NG) + (-819/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 1, 0, 0, 0, -9/8.);
  add(be7, pocoa7, 0, 2, 0, 1, 0, 0, 1, -3933/64. + (-63/4.) * (NG) + (-351/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 1, 0, 1, 0, 9/8.);
  add(be7, pocoa7, 0, 2, 0, 1, 1, 0, 0, -351/64. + (-12) * (NG) + (117/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 2, 0, 0, 0, 13653/128. + (-39/4.) * (NG) + (-819/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 1, 0, 0, 0, 1, (135/2.) * (NG) + (-72) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 2, 1, 0, 1, 0, 0, 651/8. + (-54) * (Zeta3));
  add(be7, pocoa7, 0, 2, 1, 1, 0, 0, 0, 651/8. + (-54) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 0, 0, 497/32. + (-2) * (NG));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 0, 1, -46489/288. + (3515/36.) * (NG) + (70/9.) * (pow(NG,2)) + (2259/8.) * (Zeta3) + (90) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 1, 0, -5739/256. + (9/2.) * (NG) + (99/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 0, 1, 0, 0, -17217/256. + (27/2.) * (NG) + (297/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 1, 0, 0, 0, -17217/256. + (27/2.) * (NG) + (297/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 1, 0, 0, 0, 0, (-153/8.) * (NG) + (18) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 4, 0, 0, 0, 0, 0, 982291/3072. + (-14749/192.) * (NG) + (-5/3.) * (pow(NG,2)) + (-2781/128.) * (Zeta3) + (-45) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 1, -9/10.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 2, 54/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 3, -474/5. + (72/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 1, 1, 15/4.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 1, 2, -1623/20. + (288/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 2, 0, -6/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 2, 1, 1521/40. + (-351/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 3, 0, 81/32. + (99/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 1, 0, 1, 5/4.);
  add(be7, pocoa7, 1, 0, 0, 0, 1, 0, 2, 1251/20. + (-576/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 1, 1, 1, -27/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 2, 0, 0, 2/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 2, 0, 1, -5737/40. + (747/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 3, 0, 0, 5111/160. + (-15) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 0, 0, 1, 17/4.);
  add(be7, pocoa7, 1, 0, 0, 1, 0, 0, 2, -117/4. + (-144/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 0, 1, 1, -27/5.);
  add(be7, pocoa7, 1, 0, 0, 1, 1, 0, 1, -929/20. + (-6/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 2, 0, 0, -2299/160. + (78/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 2, 0, 0, 0, -4/5.);
  add(be7, pocoa7, 1, 0, 0, 2, 0, 0, 1, -497/8. + (171/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 2, 1, 0, 0, 1337/160. + (-84/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 3, 0, 0, 0, 3467/160. + (51/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 0, 1, 0, 1, -991/30. + (24) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 0, 2, 0, 0, -641/30. + (136/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 1, 0, 0, 1, -2419/30. + (408/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 2, 0, 0, 0, 931/30. + (-56/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 0, 9/40.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 1, 117/40.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 2, -999/5. + (-486/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 1, 0, 33/20.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 1, 1, -11313/160. + (378/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 2, 0, -9/64. + (-1143/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 1, 0, 0, 27/20.);
  add(be7, pocoa7, 1, 1, 0, 0, 1, 0, 1, -9027/160. + (36/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 1, 1, 0, -3/4.);
  add(be7, pocoa7, 1, 1, 0, 0, 2, 0, 0, -3239/320. + (-933/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 1, 0, 0, 0, 63/20.);
  add(be7, pocoa7, 1, 1, 0, 1, 0, 0, 1, -19527/160. + (531/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 1, 0, 1, 0, 87/20.);
  add(be7, pocoa7, 1, 1, 0, 1, 1, 0, 0, 1001/160. + (93/10.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 2, 0, 0, 0, -1079/320. + (-2229/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 1, 0, 1, 0, 0, 699/20. + (-108/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 1, 1, 0, 0, 0, 747/20. + (-108/5.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 0, 0, -97/160. + (-2/5.) * (NG));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 0, 1, 13659/160. + (99/10.) * (NG) + (-747/40.) * (Zeta3) + (-18/5.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 1, 0, 5499/1280. + (-3/10.) * (NG) + (-9/10.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 0, 1, 0, 0, 12537/1280. + (3/2.) * (NG) + (27/5.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 1, 0, 0, 0, 9309/1280. + (3/10.) * (NG) + (81/20.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 1, 0, 0, 0, 0, (-153/40.) * (NG) + (18/5.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 3, 0, 0, 0, 0, 0, -54053/5760. + (-8341/1440.) * (NG) + (-2/9.) * (pow(NG,2)) + (-243/32.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 0, 27/400.);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 1, 687/400. + NG);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 2, -1647/25. + (-141/5.) * (NG) + (-729/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 1, 0, -9/8.);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 1, 1, -16047/1600. + (-117/20.) * (NG) + (-1107/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 2, 0, 51273/3200. + (39/20.) * (NG) + (135/16.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 1, 0, 0, 9/40.);
  add(be7, pocoa7, 2, 0, 0, 0, 1, 0, 1, -127303/4800. + (-31/20.) * (NG) + (-141/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 1, 1, 0, 123/200.);
  add(be7, pocoa7, 2, 0, 0, 0, 2, 0, 0, 15137/9600. + (-83/20.) * (NG) + (-407/80.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 1, 0, 0, 0, -171/200.);
  add(be7, pocoa7, 2, 0, 0, 1, 0, 0, 1, -112447/4800. + (-127/20.) * (NG) + (-1347/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 1, 0, 1, 0, 2103/200.);
  add(be7, pocoa7, 2, 0, 0, 1, 1, 0, 0, -6381/1600. + (-9/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 2, 0, 0, 0, 100913/9600. + (-23/20.) * (NG) + (2957/400.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 1, 0, 0, 0, 1, (99/10.) * (NG) + (-264/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 0, 1, 0, 1, 0, 0, 2049/200. + (-162/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 1, 1, 0, 0, 0, 1761/200. + (-162/25.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 0, 0, -717/800. + (-2/5.) * (NG));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 0, 1, 8811/200. + (171/20.) * (NG) + (-27/200.) * (Zeta3) + (-54/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 1, 0, 59913/6400. + (-3/10.) * (NG) + (-27/10.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 0, 1, 0, 0, 39627/6400. + (3/2.) * (NG) + (81/50.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 1, 0, 0, 0, 70563/6400. + (3/10.) * (NG) + (-27/25.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 1, 0, 0, 0, 0, (-561/200.) * (NG) + (66/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 2, 0, 0, 0, 0, 0, -64693/9600. + (149/1800.) * (NG) + (-2/9.) * (pow(NG,2)) + (7857/1600.) * (Zeta3) + (63/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 0, 0, -531/4000. + (-6/25.) * (NG));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 0, 1, 12679/2000. + (1199/150.) * (NG) + (14/9.) * (pow(NG,2)) + (243/1000.) * (Zeta3) + (-114/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 1, 0, 106083/32000. + (99/50.) * (NG) + (-81/100.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 0, 0, 1, 0, 0, 36129/32000. + (57/50.) * (NG) + (27/100.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 0, 1, 0, 0, 0, 128829/32000. + (129/50.) * (NG) + (-27/50.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 1, 0, 0, 0, 0, (-1683/1000.) * (NG) + (198/125.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 1, 0, 0, 0, 0, 0, -29779/32000. + (-18001/12000.) * (NG) + (-2/9.) * (pow(NG,2)) + (81/160.) * (Zeta3) + (183/125.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 4, 0, 0, 0, 0, 0, 0, -12321/128000. + (-12441/8000.) * (NG) + (-1/5.) * (pow(NG,2)) + (8019/80000.) * (Zeta3) + (171/125.) * ((NG) * (Zeta3)));
  
}


void BetaSMFull::operator() (const state_type &a, state_type &dadt, const double t)
{
  // 
  //    - couplings: a1->a[0], a2->a[1], as->a[2], at->a[3], ab->a[4], atau->a[5], lam->a[6]
  // 
  //    - parameter: t = Log(mu/mu0)
  // 
    
  dadt[0] = 0;                // beta a1
  dadt[1] = 0;                // beta a2
  dadt[2] = 0;                // beta as
  dadt[3] = 0;                // beta at
  dadt[4] = 0;                // beta ab
  dadt[5] = 0;                // beta atau
  dadt[6] = 0;                // beta lam
    
  long double a1   = pocoa1   < 0  ? 0 : a[0];
  long double a2   = pocoa2   < 0  ? 0 : a[1];
  long double as   = pocoa3   < 0  ? 0 : a[2];
  long double at   = pocoa4   < 0  ? 0 : a[3];
  long double ab   = pocoa5   < 0  ? 0 : a[4];
  long double atau = pocoa6   < 0  ? 0 : a[5];
  long double lam  = pocoa7   < 0  ? 0 : a[6];

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be1.begin(); it != be1.end(); ++it)
    {
      index_t ia(it->first);
      dadt[0] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be2.begin(); it != be2.end(); ++it)
    {
      index_t ia(it->first);
      dadt[1] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be3.begin(); it != be3.end(); ++it)
    {
      index_t ia(it->first);
      dadt[2] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be4.begin(); it != be4.end(); ++it)
    {
      index_t ia(it->first);
      dadt[3] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be5.begin(); it != be5.end(); ++it)
    {
      index_t ia(it->first);
      dadt[4] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be6.begin(); it != be6.end(); ++it)
    {
      index_t ia(it->first);
      dadt[5] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be7.begin(); it != be7.end(); ++it)
    {
      index_t ia(it->first);
      dadt[6] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

}



