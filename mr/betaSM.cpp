//
// MR - 2-loop matching and 3-loop Running, including full 2-loop EW corrections
// Copyright (C) 2014 Andrey Pikelner <pikelner@theor.jinr.ru>
//
// This file is part of MR.
//
// MR is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MR is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MR.  If not, see <http://www.gnu.org/licenses/>.
//

#include <iostream>
#include <stdexcept>
#include "betaSM.hpp"

void BetaSMFull::add(std::map<index_t, long double, index_cmp_t>& m, size_t p, size_t ia1, size_t ia2, size_t ias, size_t iat, size_t iab, size_t iatau, size_t ilam, long double c)
{
  if (ia1 + ia2 + ias + iat + iab + iatau + ilam <= p + 1 ) // 
    {
      if ((pocoa1 < 0 ) && (ia1 > 0))
        return;
      if ((pocoa2 < 0 ) && (ia2 > 0))
        return;
      if ((pocoa3 < 0 ) && (ias > 0))
        return;
      if ((pocoa4 < 0 ) && (iat > 0))
        return;
      if ((pocoa5 < 0 ) && (iab > 0))
        return;
      if ((pocoa6 < 0 ) && (iatau > 0))
        return;
      if ((pocoa7 < 0 ) && (ilam > 0))
        return;

      index_t v(7);
      v[0] = ia1;
      v[1] = ia2;
      v[2] = ias;
      v[3] = iat;
      v[4] = iab;
      v[5] = iatau;
      v[6] = ilam;
      
      m[v] = c;
    }
}


BetaSMFull::BetaSMFull(int pocoa1_, int pocoa2_, int pocoas_, int pocoat_, int pocoab_, int pocoatau_, int pocolam_,int NG_) : NG(NG_), pocoa1(pocoa1_), pocoa2(pocoa2_), pocoa3(pocoas_), pocoa4(pocoat_), pocoa5(pocoab_), pocoa6(pocoatau_), pocoa7(pocolam_)
{
  // * a1
  add(be1, pocoa1, 2, 0, 0, 0, 0, 0, 0, 1/10. + (4/3.) * (NG));
  add(be1, pocoa1, 2, 0, 0, 0, 0, 0, 2, -9/5.);
  add(be1, pocoa1, 2, 0, 0, 0, 0, 1, 0, -3/2.);
  add(be1, pocoa1, 2, 0, 0, 0, 0, 2, 0, 459/80.);
  add(be1, pocoa1, 2, 0, 0, 0, 1, 0, 0, -1/2.);
  add(be1, pocoa1, 2, 0, 0, 0, 1, 1, 0, 157/20.);
  add(be1, pocoa1, 2, 0, 0, 0, 2, 0, 0, 57/16.);
  add(be1, pocoa1, 2, 0, 0, 1, 0, 0, 0, -17/10.);
  add(be1, pocoa1, 2, 0, 0, 1, 0, 1, 0, 199/20.);
  add(be1, pocoa1, 2, 0, 0, 1, 1, 0, 0, 369/40.);
  add(be1, pocoa1, 2, 0, 0, 2, 0, 0, 0, 189/16.);
  add(be1, pocoa1, 2, 0, 1, 0, 0, 0, 0, (44/15.) * (NG));
  add(be1, pocoa1, 2, 0, 1, 0, 1, 0, 0, -17/5.);
  add(be1, pocoa1, 2, 0, 1, 1, 0, 0, 0, -29/5.);
  add(be1, pocoa1, 2, 0, 2, 0, 0, 0, 0, (275/9.) * (NG) + (-484/135.) * (pow(NG,2)));
  add(be1, pocoa1, 2, 1, 0, 0, 0, 0, 0, 9/10. + (3/5.) * (NG));
  add(be1, pocoa1, 2, 1, 0, 0, 0, 0, 1, 9/10.);
  add(be1, pocoa1, 2, 1, 0, 0, 0, 1, 0, -1629/160.);
  add(be1, pocoa1, 2, 1, 0, 0, 1, 0, 0, -1311/160.);
  add(be1, pocoa1, 2, 1, 0, 1, 0, 0, 0, -471/32.);
  add(be1, pocoa1, 2, 1, 1, 0, 0, 0, 0, (-1/5.) * (NG));
  add(be1, pocoa1, 2, 2, 0, 0, 0, 0, 0, 3401/320. + (83/30.) * (NG) + (-11/15.) * (pow(NG,2)));
  add(be1, pocoa1, 3, 0, 0, 0, 0, 0, 0, 9/50. + (19/15.) * (NG));
  add(be1, pocoa1, 3, 0, 0, 0, 0, 0, 1, 27/50.);
  add(be1, pocoa1, 3, 0, 0, 0, 0, 1, 0, -2529/800.);
  add(be1, pocoa1, 3, 0, 0, 0, 1, 0, 0, -1267/800.);
  add(be1, pocoa1, 3, 0, 0, 1, 0, 0, 0, -2827/800.);
  add(be1, pocoa1, 3, 0, 1, 0, 0, 0, 0, (-137/225.) * (NG));
  add(be1, pocoa1, 3, 1, 0, 0, 0, 0, 0, 783/800. + (-7/100.) * (NG));
  add(be1, pocoa1, 4, 0, 0, 0, 0, 0, 0, 489/8000. + (-58/75.) * (NG) + (-209/135.) * (pow(NG,2)));

  // * a2
  add(be2, pocoa2, 0, 2, 0, 0, 0, 0, 0, -43/6. + (4/3.) * (NG));
  add(be2, pocoa2, 0, 2, 0, 0, 0, 0, 2, -3);
  add(be2, pocoa2, 0, 2, 0, 0, 0, 1, 0, -1/2.);
  add(be2, pocoa2, 0, 2, 0, 0, 0, 2, 0, 29/16.);
  add(be2, pocoa2, 0, 2, 0, 0, 1, 0, 0, -3/2.);
  add(be2, pocoa2, 0, 2, 0, 0, 1, 1, 0, 15/4.);
  add(be2, pocoa2, 0, 2, 0, 0, 2, 0, 0, 147/16.);
  add(be2, pocoa2, 0, 2, 0, 1, 0, 0, 0, -3/2.);
  add(be2, pocoa2, 0, 2, 0, 1, 0, 1, 0, 15/4.);
  add(be2, pocoa2, 0, 2, 0, 1, 1, 0, 0, 117/8.);
  add(be2, pocoa2, 0, 2, 0, 2, 0, 0, 0, 147/16.);
  add(be2, pocoa2, 0, 2, 1, 0, 0, 0, 0, (4) * (NG));
  add(be2, pocoa2, 0, 2, 1, 0, 1, 0, 0, -7);
  add(be2, pocoa2, 0, 2, 1, 1, 0, 0, 0, -7);
  add(be2, pocoa2, 0, 2, 2, 0, 0, 0, 0, (125/3.) * (NG) + (-44/9.) * (pow(NG,2)));
  add(be2, pocoa2, 0, 3, 0, 0, 0, 0, 0, -259/6. + (49/3.) * (NG));
  add(be2, pocoa2, 0, 3, 0, 0, 0, 0, 1, 3/2.);
  add(be2, pocoa2, 0, 3, 0, 0, 0, 1, 0, -243/32.);
  add(be2, pocoa2, 0, 3, 0, 0, 1, 0, 0, -729/32.);
  add(be2, pocoa2, 0, 3, 0, 1, 0, 0, 0, -729/32.);
  add(be2, pocoa2, 0, 3, 1, 0, 0, 0, 0, (13) * (NG));
  add(be2, pocoa2, 0, 4, 0, 0, 0, 0, 0, -667111/1728. + (6412/27.) * (NG) + (-415/27.) * (pow(NG,2)));
  add(be2, pocoa2, 1, 2, 0, 0, 0, 0, 0, 3/10. + (1/5.) * (NG));
  add(be2, pocoa2, 1, 2, 0, 0, 0, 0, 1, 3/10.);
  add(be2, pocoa2, 1, 2, 0, 0, 0, 1, 0, -51/32.);
  add(be2, pocoa2, 1, 2, 0, 0, 1, 0, 0, -533/160.);
  add(be2, pocoa2, 1, 2, 0, 1, 0, 0, 0, -593/160.);
  add(be2, pocoa2, 1, 2, 1, 0, 0, 0, 0, (-1/15.) * (NG));
  add(be2, pocoa2, 1, 3, 0, 0, 0, 0, 0, 561/160. + (13/20.) * (NG));
  add(be2, pocoa2, 2, 2, 0, 0, 0, 0, 0, 163/1600. + (-7/15.) * (NG) + (-11/45.) * (pow(NG,2)));

  // * as
  add(be3, pocoa3, 0, 0, 2, 0, 0, 0, 0, -11 + (4/3.) * (NG));
  add(be3, pocoa3, 0, 0, 2, 0, 1, 0, 0, -2);
  add(be3, pocoa3, 0, 0, 2, 0, 1, 1, 0, 7/2.);
  add(be3, pocoa3, 0, 0, 2, 0, 2, 0, 0, 15);
  add(be3, pocoa3, 0, 0, 2, 1, 0, 0, 0, -2);
  add(be3, pocoa3, 0, 0, 2, 1, 0, 1, 0, 7/2.);
  add(be3, pocoa3, 0, 0, 2, 1, 1, 0, 0, 18);
  add(be3, pocoa3, 0, 0, 2, 2, 0, 0, 0, 15);
  add(be3, pocoa3, 0, 0, 3, 0, 0, 0, 0, -102 + (76/3.) * (NG));
  add(be3, pocoa3, 0, 0, 3, 0, 1, 0, 0, -40);
  add(be3, pocoa3, 0, 0, 3, 1, 0, 0, 0, -40);
  add(be3, pocoa3, 0, 0, 4, 0, 0, 0, 0, -2857/2. + (5033/9.) * (NG) + (-650/27.) * (pow(NG,2)));
  add(be3, pocoa3, 0, 1, 2, 0, 0, 0, 0, (3/2.) * (NG));
  add(be3, pocoa3, 0, 1, 2, 0, 1, 0, 0, -93/8.);
  add(be3, pocoa3, 0, 1, 2, 1, 0, 0, 0, -93/8.);
  add(be3, pocoa3, 0, 1, 3, 0, 0, 0, 0, (7) * (NG));
  add(be3, pocoa3, 0, 2, 2, 0, 0, 0, 0, (241/24.) * (NG) + (-11/6.) * (pow(NG,2)));
  add(be3, pocoa3, 1, 0, 2, 0, 0, 0, 0, (11/30.) * (NG));
  add(be3, pocoa3, 1, 0, 2, 0, 1, 0, 0, -89/40.);
  add(be3, pocoa3, 1, 0, 2, 1, 0, 0, 0, -101/40.);
  add(be3, pocoa3, 1, 0, 3, 0, 0, 0, 0, (77/45.) * (NG));
  add(be3, pocoa3, 1, 1, 2, 0, 0, 0, 0, (-1/40.) * (NG));
  add(be3, pocoa3, 2, 0, 2, 0, 0, 0, 0, (-13/120.) * (NG) + (-121/270.) * (pow(NG,2)));

  // * at  
  add(be4, pocoa4, 0, 0, 0, 1, 0, 0, 2, 6);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 0, 3, -36);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 1, 0, 1);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 1, 2, -45/2.);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 2, 0, -9/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 2, 1, 15);
  add(be4, pocoa4, 0, 0, 0, 1, 0, 3, 0, 71/16. + (3) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 1, 1, 0, 0, 3/2.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 0, 2, -291/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 1, 0, 5/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 1, 2, 0, 53/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 0, 0, -1/4.);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 0, 1, 15);
  add(be4, pocoa4, 0, 0, 0, 1, 2, 1, 0, 22);
  add(be4, pocoa4, 0, 0, 0, 1, 3, 0, 0, 477/16. + (9/2.) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 0, 9/2.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 1, -12);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 0, 2, 15/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 1, 0, -9/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 1, 1, 30);
  add(be4, pocoa4, 0, 0, 0, 2, 0, 2, 0, 207/8.);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 0, 0, -11/4.);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 0, 1, 93);
  add(be4, pocoa4, 0, 0, 0, 2, 1, 1, 0, 7/2.);
  add(be4, pocoa4, 0, 0, 0, 2, 2, 0, 0, 825/8. + (-48) * (Zeta3));
  add(be4, pocoa4, 0, 0, 0, 3, 0, 0, 0, -12);
  add(be4, pocoa4, 0, 0, 0, 3, 0, 0, 1, 198);
  add(be4, pocoa4, 0, 0, 0, 3, 0, 1, 0, 21/2.);
  add(be4, pocoa4, 0, 0, 0, 3, 1, 0, 0, 739/16.);
  add(be4, pocoa4, 0, 0, 0, 4, 0, 0, 0, 339/8. + (27/2.) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 1, 0, 0, 0, -8);
  add(be4, pocoa4, 0, 0, 1, 1, 1, 0, 0, 4);
  add(be4, pocoa4, 0, 0, 1, 1, 1, 1, 0, -43/6.);
  add(be4, pocoa4, 0, 0, 1, 1, 2, 0, 0, 82 + (-64) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 2, 0, 0, 0, 36);
  add(be4, pocoa4, 0, 0, 1, 2, 0, 0, 1, 16);
  add(be4, pocoa4, 0, 0, 1, 2, 0, 1, 0, 5/2.);
  add(be4, pocoa4, 0, 0, 1, 2, 1, 0, 0, 27 + (-32) * (Zeta3));
  add(be4, pocoa4, 0, 0, 1, 3, 0, 0, 0, -157);
  add(be4, pocoa4, 0, 0, 2, 1, 0, 0, 0, -404/3. + (80/9.) * (NG));
  add(be4, pocoa4, 0, 0, 2, 1, 1, 0, 0, -277/2. + (-14/3.) * (NG) + (-44) * (Zeta3));
  add(be4, pocoa4, 0, 0, 2, 2, 0, 0, 0, 4799/6. + (-54) * (NG) + (-228) * (Zeta3));
  add(be4, pocoa4, 0, 0, 3, 1, 0, 0, 0, -2498 + (8864/27.) * (NG) + (1120/81.) * (pow(NG,2)) + (640/3.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 1, 0, 1, 0, 0, 0, -9/4.);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 0, 2, 45);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 1, 0, 15/8.);
  add(be4, pocoa4, 0, 1, 0, 1, 0, 2, 0, -315/16. + (9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 1, 1, 0, 0, 99/16.);
  add(be4, pocoa4, 0, 1, 0, 1, 1, 1, 0, -153/8. + (9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 1, 2, 0, 0, -2283/32. + (63/2.) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 2, 0, 0, 0, 225/16.);
  add(be4, pocoa4, 0, 1, 0, 2, 0, 0, 1, -135/2.);
  add(be4, pocoa4, 0, 1, 0, 2, 0, 1, 0, -81/4. + (-9) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 2, 1, 0, 0, -2307/32. + (-9/2.) * (Zeta3));
  add(be4, pocoa4, 0, 1, 0, 3, 0, 0, 0, -1593/16.);
  add(be4, pocoa4, 0, 1, 1, 1, 0, 0, 0, 9);
  add(be4, pocoa4, 0, 1, 1, 1, 1, 0, 0, -27/2. + (-108) * (Zeta3));
  add(be4, pocoa4, 0, 1, 1, 2, 0, 0, 0, -168 + (180) * (Zeta3));
  add(be4, pocoa4, 0, 1, 2, 1, 0, 0, 0, 531/4. + (38) * (NG) + (-48) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 2, 0, 1, 0, 0, 0, -35/4. + NG);
  add(be4, pocoa4, 0, 2, 0, 1, 0, 0, 1, -171/16.);
  add(be4, pocoa4, 0, 2, 0, 1, 0, 1, 0, 2121/128. + (-21/8.) * (NG) + (-81/4.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 0, 1, 1, 0, 0, 13653/256. + (-69/16.) * (NG) + (-225/8.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 0, 2, 0, 0, 0, 49239/256. + (-351/16.) * (NG) + (-729/8.) * (Zeta3));
  add(be4, pocoa4, 0, 2, 1, 1, 0, 0, 0, 66 + (57/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 0, 3, 0, 1, 0, 0, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 1, 0, 0, 1, 0, 0, 0, -17/20.);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 0, 2, 9);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 1, 0, 15/8.);
  add(be4, pocoa4, 1, 0, 0, 1, 0, 2, 0, -27/16. + (-27/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 1, 1, 0, 0, 7/80.);
  add(be4, pocoa4, 1, 0, 0, 1, 1, 1, 0, 491/120. + (-27/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 1, 2, 0, 0, -959/160. + (19/10.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 2, 0, 0, 0, 393/80.);
  add(be4, pocoa4, 1, 0, 0, 2, 0, 0, 1, -127/10.);
  add(be4, pocoa4, 1, 0, 0, 2, 0, 1, 0, -63/5. + (24/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 2, 1, 0, 0, -1383/160. + (1/2.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 0, 3, 0, 0, 0, -2437/80.);
  add(be4, pocoa4, 1, 0, 1, 1, 0, 0, 0, 19/15.);
  add(be4, pocoa4, 1, 0, 1, 1, 1, 0, 0, -457/30. + (-28/5.) * (Zeta3));
  add(be4, pocoa4, 1, 0, 1, 2, 0, 0, 0, -126/5. + (36) * (Zeta3));
  add(be4, pocoa4, 1, 0, 2, 1, 0, 0, 0, -127/60. + (88/9.) * (NG) + (-176/15.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 1, 1, 0, 1, 0, 0, 0, -9/20.);
  add(be4, pocoa4, 1, 1, 0, 1, 0, 0, 1, 117/40.);
  add(be4, pocoa4, 1, 1, 0, 1, 0, 1, 0, -1041/320. + (-9/5.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 0, 1, 1, 0, 0, 747/128. + (27/10.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 0, 2, 0, 0, 0, 8097/640. + (369/20.) * (Zeta3));
  add(be4, pocoa4, 1, 1, 1, 1, 0, 0, 0, -321/20.);
  add(be4, pocoa4, 1, 2, 0, 1, 0, 0, 0, 927/320. + (-9/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 2, 0, 0, 1, 0, 0, 0, 9/200. + (29/45.) * (NG));
  add(be4, pocoa4, 2, 0, 0, 1, 0, 0, 1, -1089/400.);
  add(be4, pocoa4, 2, 0, 0, 1, 0, 1, 0, -4043/640. + (-117/40.) * (NG) + (-807/100.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 0, 1, 1, 0, 0, -35153/19200. + (-23/240.) * (NG) + (-199/200.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 0, 2, 0, 0, 0, -44179/19200. + (-115/16.) * (NG) + (-93/200.) * (Zeta3));
  add(be4, pocoa4, 2, 0, 1, 1, 0, 0, 0, -1187/300. + (5281/900.) * (NG) + (-748/75.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 2, 1, 0, 1, 0, 0, 0, 3243/1600. + (241/400.) * (NG) + (-153/200.) * (Zeta3) + (-51/25.) * ((NG) * (Zeta3)));
  add(be4, pocoa4, 3, 0, 0, 1, 0, 0, 0, 18103/24000. + (53413/10800.) * (NG) + (146/81.) * (pow(NG,2)) + (-153/1000.) * (Zeta3) + (-323/75.) * ((NG) * (Zeta3)));

  // * ab
  add(be5, pocoa5, 0, 0, 0, 0, 1, 0, 2, 6);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 0, 3, -36);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 1, 0, 1);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 1, 2, -45/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 2, 0, -9/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 2, 1, 15);
  add(be5, pocoa5, 0, 0, 0, 0, 1, 3, 0, 71/16. + (3) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 0, 9/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 1, -12);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 0, 2, 15/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 1, 0, -9/4.);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 1, 1, 30);
  add(be5, pocoa5, 0, 0, 0, 0, 2, 2, 0, 207/8.);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 0, 0, -12);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 0, 1, 198);
  add(be5, pocoa5, 0, 0, 0, 0, 3, 1, 0, 21/2.);
  add(be5, pocoa5, 0, 0, 0, 0, 4, 0, 0, 339/8. + (27/2.) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 1, 1, 0, 0, 3/2.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 0, 2, -291/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 1, 0, 5/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 1, 2, 0, 53/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 0, 0, -11/4.);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 0, 1, 93);
  add(be5, pocoa5, 0, 0, 0, 1, 2, 1, 0, 7/2.);
  add(be5, pocoa5, 0, 0, 0, 1, 3, 0, 0, 739/16.);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 0, 0, -1/4.);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 0, 1, 15);
  add(be5, pocoa5, 0, 0, 0, 2, 1, 1, 0, 22);
  add(be5, pocoa5, 0, 0, 0, 2, 2, 0, 0, 825/8. + (-48) * (Zeta3));
  add(be5, pocoa5, 0, 0, 0, 3, 1, 0, 0, 477/16. + (9/2.) * (Zeta3));
  add(be5, pocoa5, 0, 0, 1, 0, 1, 0, 0, -8);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 0, 0, 36);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 0, 1, 16);
  add(be5, pocoa5, 0, 0, 1, 0, 2, 1, 0, 5/2.);
  add(be5, pocoa5, 0, 0, 1, 0, 3, 0, 0, -157);
  add(be5, pocoa5, 0, 0, 1, 1, 1, 0, 0, 4);
  add(be5, pocoa5, 0, 0, 1, 1, 1, 1, 0, -43/6.);
  add(be5, pocoa5, 0, 0, 1, 1, 2, 0, 0, 27 + (-32) * (Zeta3));
  add(be5, pocoa5, 0, 0, 1, 2, 1, 0, 0, 82 + (-64) * (Zeta3));
  add(be5, pocoa5, 0, 0, 2, 0, 1, 0, 0, -404/3. + (80/9.) * (NG));
  add(be5, pocoa5, 0, 0, 2, 0, 2, 0, 0, 4799/6. + (-54) * (NG) + (-228) * (Zeta3));
  add(be5, pocoa5, 0, 0, 2, 1, 1, 0, 0, -277/2. + (-14/3.) * (NG) + (-44) * (Zeta3));
  add(be5, pocoa5, 0, 0, 3, 0, 1, 0, 0, -2498 + (8864/27.) * (NG) + (1120/81.) * (pow(NG,2)) + (640/3.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 1, 0, 0, 1, 0, 0, -9/4.);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 0, 2, 45);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 1, 0, 15/8.);
  add(be5, pocoa5, 0, 1, 0, 0, 1, 2, 0, -315/16. + (9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 0, 2, 0, 0, 225/16.);
  add(be5, pocoa5, 0, 1, 0, 0, 2, 0, 1, -135/2.);
  add(be5, pocoa5, 0, 1, 0, 0, 2, 1, 0, -81/4. + (-9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 0, 3, 0, 0, -1593/16.);
  add(be5, pocoa5, 0, 1, 0, 1, 1, 0, 0, 99/16.);
  add(be5, pocoa5, 0, 1, 0, 1, 1, 1, 0, -153/8. + (9) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 1, 2, 0, 0, -2307/32. + (-9/2.) * (Zeta3));
  add(be5, pocoa5, 0, 1, 0, 2, 1, 0, 0, -2283/32. + (63/2.) * (Zeta3));
  add(be5, pocoa5, 0, 1, 1, 0, 1, 0, 0, 9);
  add(be5, pocoa5, 0, 1, 1, 0, 2, 0, 0, -168 + (180) * (Zeta3));
  add(be5, pocoa5, 0, 1, 1, 1, 1, 0, 0, -27/2. + (-108) * (Zeta3));
  add(be5, pocoa5, 0, 1, 2, 0, 1, 0, 0, 531/4. + (38) * (NG) + (-48) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 2, 0, 0, 1, 0, 0, -35/4. + NG);
  add(be5, pocoa5, 0, 2, 0, 0, 1, 0, 1, -171/16.);
  add(be5, pocoa5, 0, 2, 0, 0, 1, 1, 0, 4041/128. + (-21/8.) * (NG) + (-99/4.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 0, 0, 2, 0, 0, 49239/256. + (-351/16.) * (NG) + (-729/8.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 0, 1, 1, 0, 0, 13653/256. + (-69/16.) * (NG) + (-225/8.) * (Zeta3));
  add(be5, pocoa5, 0, 2, 1, 0, 1, 0, 0, 66 + (57/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 0, 3, 0, 0, 1, 0, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 1, 0, 0, 0, 1, 0, 0, -1/4.);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 0, 2, 9);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 1, 0, 15/8.);
  add(be5, pocoa5, 1, 0, 0, 0, 1, 2, 0, -27/16. + (-27/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 0, 2, 0, 0, 237/80.);
  add(be5, pocoa5, 1, 0, 0, 0, 2, 0, 1, -139/10.);
  add(be5, pocoa5, 1, 0, 0, 0, 2, 1, 0, -137/10. + (21/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 0, 3, 0, 0, -1981/80.);
  add(be5, pocoa5, 1, 0, 0, 1, 1, 0, 0, 91/80.);
  add(be5, pocoa5, 1, 0, 0, 1, 1, 1, 0, 293/120. + (-18/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 1, 2, 0, 0, -4203/160. + (77/10.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 0, 2, 1, 0, 0, -363/160. + (-17/10.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 1, 0, 1, 0, 0, 31/15.);
  add(be5, pocoa5, 1, 0, 1, 0, 2, 0, 0, -18 + (132/5.) * (Zeta3));
  add(be5, pocoa5, 1, 0, 1, 1, 1, 0, 0, -161/6. + (4) * (Zeta3));
  add(be5, pocoa5, 1, 0, 2, 0, 1, 0, 0, 2453/60. + (428/45.) * (NG) + (-176/15.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 1, 1, 0, 0, 1, 0, 0, -27/20.);
  add(be5, pocoa5, 1, 1, 0, 0, 1, 0, 1, -27/40.);
  add(be5, pocoa5, 1, 1, 0, 0, 1, 1, 0, -1233/320. + (54/5.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 0, 0, 2, 0, 0, 8493/640. + (-9/5.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 0, 1, 1, 0, 0, 3267/640. + (189/20.) * (Zeta3));
  add(be5, pocoa5, 1, 1, 1, 0, 1, 0, 0, -153/20.);
  add(be5, pocoa5, 1, 2, 0, 0, 1, 0, 0, -681/64. + (231/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 2, 0, 0, 0, 1, 0, 0, -29/200. + (-1/45.) * (NG));
  add(be5, pocoa5, 2, 0, 0, 0, 1, 0, 1, -9/16.);
  add(be5, pocoa5, 2, 0, 0, 0, 1, 1, 0, -17159/3200. + (-117/40.) * (NG) + (351/100.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 0, 0, 2, 0, 0, 2741/19200. + (-59/16.) * (NG) + (-171/200.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 0, 1, 1, 0, 0, -47369/19200. + (-239/240.) * (NG) + (-13/200.) * (Zeta3));
  add(be5, pocoa5, 2, 0, 1, 0, 1, 0, 0, -449/300. + (-899/900.) * (NG) + (-44/15.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 2, 1, 0, 0, 1, 0, 0, 2763/1600. + (661/400.) * (NG) + (-9/40.) * (Zeta3) + (-3/5.) * ((NG) * (Zeta3)));
  add(be5, pocoa5, 3, 0, 0, 0, 1, 0, 0, 6383/24000. + (16201/10800.) * (NG) + (62/81.) * (pow(NG,2)) + (-9/200.) * (Zeta3) + (-19/15.) * ((NG) * (Zeta3)));

  // * atau
  add(be6, pocoa6, 0, 0, 0, 0, 0, 1, 2, 6);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 1, 3, -36);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 0, 5/2.);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 1, -12);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 2, 2, 195/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 3, 0, -3);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 3, 1, 108);
  add(be6, pocoa6, 0, 0, 0, 0, 0, 4, 0, -10 + (15/2.) * (Zeta3));
  add(be6, pocoa6, 0, 0, 0, 0, 1, 1, 0, 3);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 1, 2, -135/2.);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 2, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 2, 1, 90);
  add(be6, pocoa6, 0, 0, 0, 0, 1, 3, 0, 9);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 1, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 1, 1, 45);
  add(be6, pocoa6, 0, 0, 0, 0, 2, 2, 0, 279/8.);
  add(be6, pocoa6, 0, 0, 0, 0, 3, 1, 0, 789/16. + (9) * (Zeta3));
  add(be6, pocoa6, 0, 0, 0, 1, 0, 1, 0, 3);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 1, 2, -135/2.);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 2, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 2, 1, 90);
  add(be6, pocoa6, 0, 0, 0, 1, 0, 3, 0, 9);
  add(be6, pocoa6, 0, 0, 0, 1, 1, 1, 0, 3/2.);
  add(be6, pocoa6, 0, 0, 0, 1, 1, 2, 0, -87/4.);
  add(be6, pocoa6, 0, 0, 0, 1, 2, 1, 0, 831/16.);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 1, 0, -27/4.);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 1, 1, 45);
  add(be6, pocoa6, 0, 0, 0, 2, 0, 2, 0, 279/8.);
  add(be6, pocoa6, 0, 0, 0, 2, 1, 1, 0, 831/16.);
  add(be6, pocoa6, 0, 0, 0, 3, 0, 1, 0, 789/16. + (9) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 0, 1, 1, 0, 20);
  add(be6, pocoa6, 0, 0, 1, 0, 1, 2, 0, -96 + (72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 0, 2, 1, 0, 15/2. + (-72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 1, 0, 1, 0, 20);
  add(be6, pocoa6, 0, 0, 1, 1, 0, 2, 0, -96 + (72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 1, 1, 1, 0, 57 + (-48) * (Zeta3));
  add(be6, pocoa6, 0, 0, 1, 2, 0, 1, 0, 15/2. + (-72) * (Zeta3));
  add(be6, pocoa6, 0, 0, 2, 0, 1, 1, 0, 910/3. + (-32) * (NG) + (-24) * (Zeta3));
  add(be6, pocoa6, 0, 0, 2, 1, 0, 1, 0, 910/3. + (-32) * (NG) + (-24) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 0, 0, 1, 0, -9/4.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 1, 2, 45);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 2, 0, 165/16.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 2, 1, -135/2.);
  add(be6, pocoa6, 0, 1, 0, 0, 0, 3, 0, -531/16.);
  add(be6, pocoa6, 0, 1, 0, 0, 1, 1, 0, 45/8.);
  add(be6, pocoa6, 0, 1, 0, 0, 1, 2, 0, -135/4. + (-27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 0, 2, 1, 0, -1161/16. + (27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 1, 0, 1, 0, 45/8.);
  add(be6, pocoa6, 0, 1, 0, 1, 0, 2, 0, -135/4. + (-27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 0, 1, 1, 1, 0, -387/8.);
  add(be6, pocoa6, 0, 1, 0, 2, 0, 1, 0, -1161/16. + (27) * (Zeta3));
  add(be6, pocoa6, 0, 1, 1, 0, 1, 1, 0, -489/4. + (108) * (Zeta3));
  add(be6, pocoa6, 0, 1, 1, 1, 0, 1, 0, -489/4. + (108) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 0, 0, 1, 0, -35/4. + NG);
  add(be6, pocoa6, 0, 2, 0, 0, 0, 1, 1, -171/16.);
  add(be6, pocoa6, 0, 2, 0, 0, 0, 2, 0, 33075/256. + (-267/16.) * (NG) + (-333/8.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 0, 1, 1, 0, 12123/128. + (-63/8.) * (NG) + (-297/4.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 0, 1, 0, 1, 0, 6363/128. + (-63/8.) * (NG) + (-243/4.) * (Zeta3));
  add(be6, pocoa6, 0, 2, 1, 0, 0, 1, 0, (117/4.) * (NG) + (-36) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 0, 3, 0, 0, 0, 1, 0, -14677/576. + (-1139/144.) * (NG) + (50/9.) * (pow(NG,2)) + (45/8.) * (Zeta3) + (45) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 1, 0, 0, 0, 0, 1, 0, -9/4.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 1, 2, 9);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 2, 0, 537/80.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 2, 1, -99/10.);
  add(be6, pocoa6, 1, 0, 0, 0, 0, 3, 0, -459/16.);
  add(be6, pocoa6, 1, 0, 0, 0, 1, 1, 0, 5/8.);
  add(be6, pocoa6, 1, 0, 0, 0, 1, 2, 0, -87/20. + (-9/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 0, 2, 1, 0, -1233/80. + (27/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 1, 0, 1, 0, 17/8.);
  add(be6, pocoa6, 1, 0, 0, 1, 0, 2, 0, -231/20. + (18/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 1, 1, 1, 0, -417/40. + (24/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 0, 2, 0, 1, 0, -957/80. + (-9/5.) * (Zeta3));
  add(be6, pocoa6, 1, 0, 1, 0, 1, 1, 0, -991/60. + (12) * (Zeta3));
  add(be6, pocoa6, 1, 0, 1, 1, 0, 1, 0, -2419/60. + (204/5.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 0, 0, 1, 0, 27/20.);
  add(be6, pocoa6, 1, 1, 0, 0, 0, 1, 1, 261/40.);
  add(be6, pocoa6, 1, 1, 0, 0, 0, 2, 0, -2727/640. + (351/10.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 0, 1, 1, 0, 5469/320. + (-27/5.) * (Zeta3));
  add(be6, pocoa6, 1, 1, 0, 1, 0, 1, 0, 3417/320. + (-297/10.) * (Zeta3));
  add(be6, pocoa6, 1, 2, 0, 0, 0, 1, 0, 7371/320. + (-369/80.) * (NG) + (-27/40.) * (Zeta3) + (-9/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 2, 0, 0, 0, 0, 1, 0, 51/200. + (11/5.) * (NG));
  add(be6, pocoa6, 2, 0, 0, 0, 0, 1, 1, -621/80.);
  add(be6, pocoa6, 2, 0, 0, 0, 0, 2, 0, 5463/1280. + (-819/80.) * (NG) + (-27/8.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 0, 0, 1, 1, 0, -32191/9600. + (-31/40.) * (NG) + (-87/100.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 0, 1, 0, 1, 0, -3055/384. + (-127/40.) * (NG) + (-3471/100.) * (Zeta3));
  add(be6, pocoa6, 2, 0, 1, 0, 0, 1, 0, (2409/100.) * (NG) + (-132/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 2, 1, 0, 0, 0, 1, 0, 3807/1600. + (261/400.) * (NG) + (-81/40.) * (Zeta3) + (-27/5.) * ((NG) * (Zeta3)));
  add(be6, pocoa6, 3, 0, 0, 0, 0, 1, 0, -12119/8000. + (15769/1200.) * (NG) + (38/9.) * (pow(NG,2)) + (-81/200.) * (Zeta3) + (-57/5.) * ((NG) * (Zeta3)));

  // * alam
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 2, 12);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 3, -156);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 0, 4, 3588 + (2016) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 1, 2);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 2, -24);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 1, 3, 291);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 0, -1);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 1, -1/2.);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 2, 2, 717/2. + (252) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 3, 0, 5);
  add(be7, pocoa7, 0, 0, 0, 0, 0, 3, 1, -1241/8. + (-66) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 0, 4, 0, -143/8. + (-12) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 1, 6);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 2, -72);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 0, 3, 873);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 1, 2, -216);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 2, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 0, 1, 3, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 1, -3/2.);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 0, 2, 1719/2. + (756) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 2, 1, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 0, 2, 2, 0, -72);
  add(be7, pocoa7, 0, 0, 0, 0, 3, 0, 0, 15);
  add(be7, pocoa7, 0, 0, 0, 0, 3, 0, 1, 117/8. + (-198) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 0, 3, 1, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 0, 4, 0, 0, -1599/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 1, 6);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 2, -72);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 0, 3, 873);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 1, 2, -216);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 2, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 1, 0, 3, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 0, 1, -21);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 0, 2, 117 + (-864) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 1, 1, 1, 21);
  add(be7, pocoa7, 0, 0, 0, 1, 1, 2, 0, 12);
  add(be7, pocoa7, 0, 0, 0, 1, 2, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 1, 2, 0, 1, 6399/8. + (144) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 1, 2, 1, 0, 45/8.);
  add(be7, pocoa7, 0, 0, 0, 1, 3, 0, 0, -717/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 1, -3/2.);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 0, 2, 1719/2. + (756) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 0, 1, 1, 240);
  add(be7, pocoa7, 0, 0, 0, 2, 0, 2, 0, -72);
  add(be7, pocoa7, 0, 0, 0, 2, 1, 0, 0, -3);
  add(be7, pocoa7, 0, 0, 0, 2, 1, 0, 1, 6399/8. + (144) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 2, 1, 1, 0, 45/8.);
  add(be7, pocoa7, 0, 0, 0, 2, 2, 0, 0, (72) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 3, 0, 0, 0, 15);
  add(be7, pocoa7, 0, 0, 0, 3, 0, 0, 1, 117/8. + (-198) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 3, 0, 1, 0, -297/8.);
  add(be7, pocoa7, 0, 0, 0, 3, 1, 0, 0, -717/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 0, 4, 0, 0, 0, -1599/8. + (-36) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 1, 0, 1, 40);
  add(be7, pocoa7, 0, 0, 1, 0, 1, 0, 2, -1224 + (1152) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 2, 0, 0, -16);
  add(be7, pocoa7, 0, 0, 1, 0, 2, 0, 1, 895 + (-1296) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 0, 3, 0, 0, -38 + (240) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 0, 0, 1, 40);
  add(be7, pocoa7, 0, 0, 1, 1, 0, 0, 2, -1224 + (1152) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 1, 0, 1, 82 + (-96) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 1, 2, 0, 0, -2 + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 2, 0, 0, 0, -16);
  add(be7, pocoa7, 0, 0, 1, 2, 0, 0, 1, 895 + (-1296) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 2, 1, 0, 0, -2 + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 1, 3, 0, 0, 0, -38 + (240) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 0, 1, 0, 1, 1820/3. + (-64) * (NG) + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 0, 2, 0, 0, -626/3. + (40) * (NG) + (32) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 1, 0, 0, 1, 1820/3. + (-64) * (NG) + (-48) * (Zeta3));
  add(be7, pocoa7, 0, 0, 2, 1, 1, 0, 0, 192);
  add(be7, pocoa7, 0, 0, 2, 2, 0, 0, 0, -626/3. + (40) * (NG) + (32) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 1, -9/2.);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 2, 54);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 0, 3, -474 + (72) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 1, 1, 15/4.);
  add(be7, pocoa7, 0, 1, 0, 0, 0, 1, 2, 213/4. + (-144) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 2, 1, -1587/8. + (171) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 0, 3, 0, 1137/32. + (-9) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 1, 0, 1, 45/4.);
  add(be7, pocoa7, 0, 1, 0, 0, 1, 0, 2, 639/4. + (-432) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 1, 1, 1, -27);
  add(be7, pocoa7, 0, 1, 0, 0, 2, 0, 1, -4977/8. + (513) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 0, 3, 0, 0, 3411/32. + (-27) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 0, 0, 1, 45/4.);
  add(be7, pocoa7, 0, 1, 0, 1, 0, 0, 2, 639/4. + (-432) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 0, 1, 1, -27);
  add(be7, pocoa7, 0, 1, 0, 1, 1, 0, 1, -531/4. + (54) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 1, 2, 0, 0, 477/32.);
  add(be7, pocoa7, 0, 1, 0, 2, 0, 0, 1, -4977/8. + (513) * (Zeta3));
  add(be7, pocoa7, 0, 1, 0, 2, 1, 0, 0, 477/32.);
  add(be7, pocoa7, 0, 1, 0, 3, 0, 0, 0, 3411/32. + (-27) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 0, 1, 0, 1, -489/2. + (216) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 0, 2, 0, 0, -31/2. + (24) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 1, 0, 0, 1, -489/2. + (216) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 1, 1, 0, 0, -8 + (96) * (Zeta3));
  add(be7, pocoa7, 0, 1, 1, 2, 0, 0, 0, -31/2. + (24) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 0, 9/16.);
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 1, -313/16. + (5) * (NG));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 0, 2, 1995/8. + (-141) * (NG) + (-513) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 1, 0, -3/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 0, 1, 1, -1311/64. + (-21/4.) * (NG) + (-117/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 0, 2, 0, 4503/128. + (-13/4.) * (NG) + (-273/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 1, 0, 0, -9/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 1, 0, 1, -3933/64. + (-63/4.) * (NG) + (-351/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 0, 1, 1, 0, 9/8.);
  add(be7, pocoa7, 0, 2, 0, 0, 2, 0, 0, 13653/128. + (-39/4.) * (NG) + (-819/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 1, 0, 0, 0, -9/8.);
  add(be7, pocoa7, 0, 2, 0, 1, 0, 0, 1, -3933/64. + (-63/4.) * (NG) + (-351/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 1, 0, 1, 0, 9/8.);
  add(be7, pocoa7, 0, 2, 0, 1, 1, 0, 0, -351/64. + (-12) * (NG) + (117/2.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 0, 2, 0, 0, 0, 13653/128. + (-39/4.) * (NG) + (-819/16.) * (Zeta3));
  add(be7, pocoa7, 0, 2, 1, 0, 0, 0, 1, (135/2.) * (NG) + (-72) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 2, 1, 0, 1, 0, 0, 651/8. + (-54) * (Zeta3));
  add(be7, pocoa7, 0, 2, 1, 1, 0, 0, 0, 651/8. + (-54) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 0, 0, 497/32. + (-2) * (NG));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 0, 1, -46489/288. + (3515/36.) * (NG) + (70/9.) * (pow(NG,2)) + (2259/8.) * (Zeta3) + (90) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 3, 0, 0, 0, 1, 0, -5739/256. + (9/2.) * (NG) + (99/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 0, 1, 0, 0, -17217/256. + (27/2.) * (NG) + (297/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 0, 1, 0, 0, 0, -17217/256. + (27/2.) * (NG) + (297/4.) * (Zeta3));
  add(be7, pocoa7, 0, 3, 1, 0, 0, 0, 0, (-153/8.) * (NG) + (18) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 0, 4, 0, 0, 0, 0, 0, 982291/3072. + (-14749/192.) * (NG) + (-5/3.) * (pow(NG,2)) + (-2781/128.) * (Zeta3) + (-45) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 1, -9/10.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 2, 54/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 0, 3, -474/5. + (72/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 1, 1, 15/4.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 1, 2, -1623/20. + (288/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 2, 0, -6/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 0, 2, 1, 1521/40. + (-351/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 0, 3, 0, 81/32. + (99/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 1, 0, 1, 5/4.);
  add(be7, pocoa7, 1, 0, 0, 0, 1, 0, 2, 1251/20. + (-576/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 1, 1, 1, -27/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 2, 0, 0, 2/5.);
  add(be7, pocoa7, 1, 0, 0, 0, 2, 0, 1, -5737/40. + (747/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 0, 3, 0, 0, 5111/160. + (-15) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 0, 0, 1, 17/4.);
  add(be7, pocoa7, 1, 0, 0, 1, 0, 0, 2, -117/4. + (-144/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 0, 1, 1, -27/5.);
  add(be7, pocoa7, 1, 0, 0, 1, 1, 0, 1, -929/20. + (-6/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 1, 2, 0, 0, -2299/160. + (78/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 2, 0, 0, 0, -4/5.);
  add(be7, pocoa7, 1, 0, 0, 2, 0, 0, 1, -497/8. + (171/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 2, 1, 0, 0, 1337/160. + (-84/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 0, 3, 0, 0, 0, 3467/160. + (51/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 0, 1, 0, 1, -991/30. + (24) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 0, 2, 0, 0, -641/30. + (136/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 1, 0, 0, 1, -2419/30. + (408/5.) * (Zeta3));
  add(be7, pocoa7, 1, 0, 1, 2, 0, 0, 0, 931/30. + (-56/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 0, 9/40.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 1, 117/40.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 0, 2, -999/5. + (-486/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 1, 0, 33/20.);
  add(be7, pocoa7, 1, 1, 0, 0, 0, 1, 1, -11313/160. + (378/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 0, 2, 0, -9/64. + (-1143/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 1, 0, 0, 27/20.);
  add(be7, pocoa7, 1, 1, 0, 0, 1, 0, 1, -9027/160. + (36/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 0, 1, 1, 0, -3/4.);
  add(be7, pocoa7, 1, 1, 0, 0, 2, 0, 0, -3239/320. + (-933/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 1, 0, 0, 0, 63/20.);
  add(be7, pocoa7, 1, 1, 0, 1, 0, 0, 1, -19527/160. + (531/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 1, 0, 1, 0, 87/20.);
  add(be7, pocoa7, 1, 1, 0, 1, 1, 0, 0, 1001/160. + (93/10.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 0, 2, 0, 0, 0, -1079/320. + (-2229/40.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 1, 0, 1, 0, 0, 699/20. + (-108/5.) * (Zeta3));
  add(be7, pocoa7, 1, 1, 1, 1, 0, 0, 0, 747/20. + (-108/5.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 0, 0, -97/160. + (-2/5.) * (NG));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 0, 1, 13659/160. + (99/10.) * (NG) + (-747/40.) * (Zeta3) + (-18/5.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 2, 0, 0, 0, 1, 0, 5499/1280. + (-3/10.) * (NG) + (-9/10.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 0, 1, 0, 0, 12537/1280. + (3/2.) * (NG) + (27/5.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 0, 1, 0, 0, 0, 9309/1280. + (3/10.) * (NG) + (81/20.) * (Zeta3));
  add(be7, pocoa7, 1, 2, 1, 0, 0, 0, 0, (-153/40.) * (NG) + (18/5.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 1, 3, 0, 0, 0, 0, 0, -54053/5760. + (-8341/1440.) * (NG) + (-2/9.) * (pow(NG,2)) + (-243/32.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 0, 27/400.);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 1, 687/400. + NG);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 0, 2, -1647/25. + (-141/5.) * (NG) + (-729/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 1, 0, -9/8.);
  add(be7, pocoa7, 2, 0, 0, 0, 0, 1, 1, -16047/1600. + (-117/20.) * (NG) + (-1107/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 0, 2, 0, 51273/3200. + (39/20.) * (NG) + (135/16.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 1, 0, 0, 9/40.);
  add(be7, pocoa7, 2, 0, 0, 0, 1, 0, 1, -127303/4800. + (-31/20.) * (NG) + (-141/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 0, 1, 1, 0, 123/200.);
  add(be7, pocoa7, 2, 0, 0, 0, 2, 0, 0, 15137/9600. + (-83/20.) * (NG) + (-407/80.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 1, 0, 0, 0, -171/200.);
  add(be7, pocoa7, 2, 0, 0, 1, 0, 0, 1, -112447/4800. + (-127/20.) * (NG) + (-1347/50.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 1, 0, 1, 0, 2103/200.);
  add(be7, pocoa7, 2, 0, 0, 1, 1, 0, 0, -6381/1600. + (-9/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 0, 2, 0, 0, 0, 100913/9600. + (-23/20.) * (NG) + (2957/400.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 1, 0, 0, 0, 1, (99/10.) * (NG) + (-264/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 0, 1, 0, 1, 0, 0, 2049/200. + (-162/25.) * (Zeta3));
  add(be7, pocoa7, 2, 0, 1, 1, 0, 0, 0, 1761/200. + (-162/25.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 0, 0, -717/800. + (-2/5.) * (NG));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 0, 1, 8811/200. + (171/20.) * (NG) + (-27/200.) * (Zeta3) + (-54/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 1, 0, 0, 0, 1, 0, 59913/6400. + (-3/10.) * (NG) + (-27/10.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 0, 1, 0, 0, 39627/6400. + (3/2.) * (NG) + (81/50.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 0, 1, 0, 0, 0, 70563/6400. + (3/10.) * (NG) + (-27/25.) * (Zeta3));
  add(be7, pocoa7, 2, 1, 1, 0, 0, 0, 0, (-561/200.) * (NG) + (66/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 2, 2, 0, 0, 0, 0, 0, -64693/9600. + (149/1800.) * (NG) + (-2/9.) * (pow(NG,2)) + (7857/1600.) * (Zeta3) + (63/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 0, 0, -531/4000. + (-6/25.) * (NG));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 0, 1, 12679/2000. + (1199/150.) * (NG) + (14/9.) * (pow(NG,2)) + (243/1000.) * (Zeta3) + (-114/25.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 0, 0, 0, 0, 1, 0, 106083/32000. + (99/50.) * (NG) + (-81/100.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 0, 0, 1, 0, 0, 36129/32000. + (57/50.) * (NG) + (27/100.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 0, 1, 0, 0, 0, 128829/32000. + (129/50.) * (NG) + (-27/50.) * (Zeta3));
  add(be7, pocoa7, 3, 0, 1, 0, 0, 0, 0, (-1683/1000.) * (NG) + (198/125.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 3, 1, 0, 0, 0, 0, 0, -29779/32000. + (-18001/12000.) * (NG) + (-2/9.) * (pow(NG,2)) + (81/160.) * (Zeta3) + (183/125.) * ((NG) * (Zeta3)));
  add(be7, pocoa7, 4, 0, 0, 0, 0, 0, 0, -12321/128000. + (-12441/8000.) * (NG) + (-1/5.) * (pow(NG,2)) + (8019/80000.) * (Zeta3) + (171/125.) * ((NG) * (Zeta3)));
}


void BetaSMFull::operator() (const state_type &a, state_type &dadt, const double t)
{
  // 
  //    - couplings: a1->a[0], a2->a[1], as->a[2], at->a[3], ab->a[4], atau->a[5], lam->a[6]
  // 
  //    - parameter: t = Log(mu/mu0)
  // 
  dadt[0] = 0;                // beta a1
  dadt[1] = 0;                // beta a2
  dadt[2] = 0;                // beta as
  dadt[3] = 0;                // beta at
  dadt[4] = 0;                // beta ab
  dadt[5] = 0;                // beta atau
  dadt[6] = 0;                // beta lam

  long double a1   = pocoa1   < 0  ? 0 : a[0];
  long double a2   = pocoa2   < 0  ? 0 : a[1];
  long double as   = pocoa3   < 0  ? 0 : a[2];
  long double at   = pocoa4   < 0  ? 0 : a[3];
  long double ab   = pocoa5   < 0  ? 0 : a[4];
  long double atau = pocoa6   < 0  ? 0 : a[5];
  long double lam  = pocoa7   < 0  ? 0 : a[6];


  for (std::map<index_t, long double, index_cmp_t>::iterator it = be1.begin(); it != be1.end(); ++it)
    {
      index_t ia(it->first);
      dadt[0] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be2.begin(); it != be2.end(); ++it)
    {
      index_t ia(it->first);
      dadt[1] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be3.begin(); it != be3.end(); ++it)
    {
      index_t ia(it->first);
      dadt[2] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be4.begin(); it != be4.end(); ++it)
    {
      index_t ia(it->first);
      dadt[3] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be5.begin(); it != be5.end(); ++it)
    {
      index_t ia(it->first);
      dadt[4] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be6.begin(); it != be6.end(); ++it)
    {
      index_t ia(it->first);
      dadt[5] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }

  for (std::map<index_t, long double, index_cmp_t>::iterator it = be7.begin(); it != be7.end(); ++it)
    {
      index_t ia(it->first);
      dadt[6] += (it->second)*pow(a1,ia[0])*pow(a2,ia[1])*pow(as,ia[2])
                                *pow(at,ia[3])*pow(ab,ia[4])*pow(atau,ia[5])
                                *pow(lam,ia[6]);
    }


}



//
// VEV gamma_{v^2}
// 

long double BetaVEV::gamv(const state_type &a, size_t NG)
{
  long double gamV = 
    + pow(a[6],-1) * ( 1./2.*pow(a[5],2) + 3./2.*pow(a[4],2) + 3./2.*
                       pow(a[3],2) - 9./32.*pow(a[1],2) - 9./80.*a[0]*a[1] - 27./800.*pow(a[0],2) );
  
  gamV +=  + (  - 1./2.*a[5] - 3./2.*a[4] - 3./2.*a[3] + 9./8.*a[1]
                + 9./40.*a[0] );
  
  gamV +=  + a[6] * (  - 3 );
  
  gamV +=  + pow(a[6],-1) * (  - 5./2.*pow(a[5],3) - 15./2.
                               *pow(a[4],3) + 3./2.*a[3]*pow(a[4],2) + 3./2.*pow(a[3],2)*a[4] - 15./2.*
                               pow(a[3],3) + 8*a[2]*pow(a[4],2) + 8*a[2]*pow(a[3],2) + 3./16.*pow(a[1],2)
                               *a[5] + 9./16.*pow(a[1],2)*a[4] + 9./16.*pow(a[1],2)*a[3] - 497./64.*
                               pow(a[1],3) + pow(a[1],3)*NG + 3./5.*a[0]*pow(a[5],2) - 1./5.*a[0]*
                               pow(a[4],2) + 2./5.*a[0]*pow(a[3],2) - 33./40.*a[0]*a[1]*a[5] - 27./40.*
                               a[0]*a[1]*a[4] - 63./40.*a[0]*a[1]*a[3] + 97./320.*a[0]*pow(a[1],2) + 1./5.*a[0]
                               *pow(a[1],2)*NG + 9./16.*pow(a[0],2)*a[5] - 9./80.*pow(a[0],2)*a[4] + 
                               171./400.*pow(a[0],2)*a[3] + 717./1600.*pow(a[0],2)*a[1]
                               + 1./5.*pow(a[0],2)*a[1]*NG + 531./8000.*pow(a[0],3) + 3./25.*pow(a[0],3)*NG );
  
  gamV +=  +  (  - 7./8.*pow(a[5],2) - 21./8.*pow(a[4],2)
                 + 21./4.*a[3]*a[4] - 21./8.*pow(a[3],2) - 10*a[2]*a[4] - 10*a[2]*a[3] - 15./
                 16.*a[1]*a[5] - 45./16.*a[1]*a[4] - 45./16.*a[1]*a[3] + 241./64.*pow(a[1],2)
                 - 5./4.*pow(a[1],2)*NG - 15./16.*a[0]*a[5] - 5./16.*a[0]*a[4] - 
                 17./16.*a[0]*a[3] - 189./160.*a[0]*a[1] - 903./1600.*pow(a[0],2) - 1./4.
                 *pow(a[0],2)*NG );
  
  gamV +=  + a[6] * ( 6*a[5] + 18*a[4] + 18*a[3] - 9*a[1] - 9./5.*a[0] );
  
  gamV +=  + pow(a[6],2) * ( 63 );
  
  gamV +=  + pow(a[6],-1) * ( 143./16.*pow(a[5],4) + 297./
                              16.*a[4]*pow(a[5],3) + 36*pow(a[4],2)*pow(a[5],2) + 297./16.*pow(a[4],3)*a[5]
                              + 1599./16.*pow(a[4],4) + 297./16.*a[3]*pow(a[5],3) - 6
                              *a[3]*a[4]*pow(a[5],2) - 45./16.*a[3]*pow(a[4],2)*a[5] + 717./16.*a[3]*
                              pow(a[4],3) + 36*pow(a[3],2)*pow(a[5],2) - 45./16.*pow(a[3],2)*a[4]*
                              a[5] + 297./16.*pow(a[3],3)*a[5] + 717./16.*pow(a[3],3)*a[4] + 1599./
                              16.*pow(a[3],4) + 6*Zeta3*pow(a[5],4) + 18*Zeta3*pow(a[4],4) + 18*
                              Zeta3*a[3]*pow(a[4],3) - 36*Zeta3*pow(a[3],2)*pow(a[4],2) + 18*Zeta3*
                              pow(a[3],3)*a[4] + 18*Zeta3*pow(a[3],4) + 19*a[2]*pow(a[4],3) + a[2]*a[3]*
                              pow(a[4],2) + a[2]*pow(a[3],2)*a[4] + 19*a[2]*pow(a[3],3) - 120*a[2]*Zeta3*
                              pow(a[4],3) + 24*a[2]*Zeta3*a[3]*pow(a[4],2) + 24*a[2]*Zeta3*pow(a[3],2)*
                              a[4] - 120*a[2]*Zeta3*pow(a[3],3) + 313./3.*pow(a[2],2)*pow(a[4],2) - 96
                              *pow(a[2],2)*a[3]*a[4] + 313./3.*pow(a[2],2)*pow(a[3],2) - 16*pow(a[2],2)*
                              Zeta3*pow(a[4],2) - 16*pow(a[2],2)*Zeta3*pow(a[3],2) - 20*NG*pow(a[2],2)*pow(a[4],2)
                              - 20*NG*pow(a[2],2)*pow(a[3],2) - 1137./64.*a[1]*pow(a[5],3) );
  
  gamV +=  + pow(a[6],-1) * (  - 3411./64.*a[1]*pow(a[4],3) - 
                               477./64.*a[1]*a[3]*pow(a[4],2) - 477./64.*a[1]*pow(a[3],2)*a[4] - 3411./64.
                               *a[1]*pow(a[3],3) + 9./2.*a[1]*Zeta3*pow(a[5],3) + 27./2.*a[1]*Zeta3*
                               pow(a[4],3) + 27./2.*a[1]*Zeta3*pow(a[3],3) + 31./4.*a[1]*a[2]*pow(a[4],2)
                               + 4*a[1]*a[2]*a[3]*a[4] + 31./4.*a[1]*a[2]*pow(a[3],2) - 12*a[1]*a[2]*Zeta3*
                               pow(a[4],2) - 48*a[1]*a[2]*Zeta3*a[3]*a[4] - 12*a[1]*a[2]*Zeta3*pow(a[3],2) - 
                               4503./256.*pow(a[1],2)*pow(a[5],2) - 9./16.*pow(a[1],2)*a[4]*a[5] - 
                               13653./256.*pow(a[1],2)*pow(a[4],2) - 9./16.*pow(a[1],2)*a[3]*a[5] + 
                               351./128.*pow(a[1],2)*a[3]*a[4] - 13653./256.*pow(a[1],2)*pow(a[3],2) + 
                               273./32.*pow(a[1],2)*Zeta3*pow(a[5],2) + 819./32.*pow(a[1],2)*
                               Zeta3*pow(a[4],2) - 117./4.*pow(a[1],2)*Zeta3*a[3]*a[4] + 819./32.*
                               pow(a[1],2)*Zeta3*pow(a[3],2) - 651./16.*pow(a[1],2)*a[2]*a[4] - 651./16.
                               *pow(a[1],2)*a[2]*a[3] + 27*pow(a[1],2)*a[2]*Zeta3*a[4] + 27*pow(a[1],2)*a[2]*
                               Zeta3*a[3] + 13./8.*pow(a[1],2)*NG*pow(a[5],2) + 39./8.*pow(a[1],2)*
                               NG*pow(a[4],2) + 6*pow(a[1],2)*NG*a[3]*a[4] + 39./8.*pow(a[1],2)*NG*pow(a[3],2) );
  
  gamV +=  + pow(a[6],-1) * ( 5739./512.*pow(a[1],3)*a[5] + 
                              17217./512.*pow(a[1],3)*a[4] + 17217./512.*pow(a[1],3)*a[3] - 99./8.*
                              pow(a[1],3)*Zeta3*a[5] - 297./8.*pow(a[1],3)*Zeta3*a[4] - 297./8.*
                              pow(a[1],3)*Zeta3*a[3] - 9./4.*pow(a[1],3)*NG*a[5] - 27./4.*pow(a[1],3)*NG*a[4]
                              - 27./4.*pow(a[1],3)*NG*a[3] + 153./16.*pow(a[1],3)*NG*
                              a[2] - 9*pow(a[1],3)*NG*a[2]*Zeta3 - 982291./6144.*pow(a[1],4) + 2781./
                              256.*pow(a[1],4)*Zeta3 + 14749./384.*pow(a[1],4)*NG + 45./2.*pow(a[1],4)*NG*Zeta3
                              + 5./6.*pow(a[1],4)*pow(NG,2) - 81./64.*a[0]*pow(a[5],3) - 5111./320.*a[0]*pow(a[4],3)
                              + 2299./320.*a[0]*a[3]*pow(a[4],2)
                              - 1337./320.*a[0]*pow(a[3],2)*a[4] - 3467./320.*a[0]*pow(a[3],3) - 99./
                              10.*a[0]*Zeta3*pow(a[5],3) + 15./2.*a[0]*Zeta3*pow(a[4],3) - 39./5.*
                              a[0]*Zeta3*a[3]*pow(a[4],2) + 42./5.*a[0]*Zeta3*pow(a[3],2)*a[4] - 51./10.
                              *a[0]*Zeta3*pow(a[3],3) + 641./60.*a[0]*a[2]*pow(a[4],2) - 931./60.*a[0]*
                              a[2]*pow(a[3],2) - 68./5.*a[0]*a[2]*Zeta3*pow(a[4],2) + 28./5.*a[0]*a[2]*
                              Zeta3*pow(a[3],2) + 9./128.*a[0]*a[1]*pow(a[5],2) + 3./8.*a[0]*a[1]*a[4]*
                              a[5] );

  gamV +=  + pow(a[6],-1) * ( 3239./640.*a[0]*a[1]*pow(a[4],2) - 
                              87./40.*a[0]*a[1]*a[3]*a[5] - 1001./320.*a[0]*a[1]*a[3]*a[4] + 1079./640.*a[0]
                              *a[1]*pow(a[3],2) + 1143./80.*a[0]*a[1]*Zeta3*pow(a[5],2) + 933./80.*
                              a[0]*a[1]*Zeta3*pow(a[4],2) - 93./20.*a[0]*a[1]*Zeta3*a[3]*a[4] + 2229./80.*
                              a[0]*a[1]*Zeta3*pow(a[3],2) - 699./40.*a[0]*a[1]*a[2]*a[4] - 747./40.*a[0]*a[1]*
                              a[2]*a[3] + 54./5.*a[0]*a[1]*a[2]*Zeta3*a[4] + 54./5.*a[0]*a[1]*a[2]*Zeta3*a[3] - 
                              5499./2560.*a[0]*pow(a[1],2)*a[5] - 12537./2560.*a[0]*pow(a[1],2)*a[4]
                              - 9309./2560.*a[0]*pow(a[1],2)*a[3] + 9./20.*a[0]*pow(a[1],2)*Zeta3*
                              a[5] - 27./10.*a[0]*pow(a[1],2)*Zeta3*a[4] - 81./40.*a[0]*pow(a[1],2)*
                              Zeta3*a[3] + 3./20.*a[0]*pow(a[1],2)*NG*a[5] - 3./4.*a[0]*pow(a[1],2)*NG
                              *a[4] - 3./20.*a[0]*pow(a[1],2)*NG*a[3] + 153./80.*a[0]*pow(a[1],2)*NG*a[2]
                              - 9./5.*a[0]*pow(a[1],2)*NG*a[2]*Zeta3 + 54053./11520.*a[0]*pow(a[1],3)
                              + 243./64.*a[0]*pow(a[1],3)*Zeta3 + 8341./2880.*a[0]*pow(a[1],3)*NG
                              + 1./9.*a[0]*pow(a[1],3)*pow(NG,2) - 51273./6400.*pow(a[0],2)*pow(a[5],2)
                              - 123./400.*pow(a[0],2)*a[4]*a[5] - 15137./19200.*pow(a[0],2)*pow(a[4],2) );

  gamV +=  + pow(a[6],-1) * (  - 2103./400.*pow(a[0],2)*a[3]*
                               a[5] + 6381./3200.*pow(a[0],2)*a[3]*a[4] - 100913./19200.*pow(a[0],2)*
                               pow(a[3],2) - 135./32.*pow(a[0],2)*Zeta3*pow(a[5],2) + 407./160.*
                               pow(a[0],2)*Zeta3*pow(a[4],2) + 9./50.*pow(a[0],2)*Zeta3*a[3]*a[4] - 
                               2957./800.*pow(a[0],2)*Zeta3*pow(a[3],2) - 2049./400.*pow(a[0],2)*a[2]
                               *a[4] - 1761./400.*pow(a[0],2)*a[2]*a[3] + 81./25.*pow(a[0],2)*a[2]*Zeta3*
                               a[4] + 81./25.*pow(a[0],2)*a[2]*Zeta3*a[3] - 39./40.*pow(a[0],2)*NG*pow(a[5],2)
                               + 83./40.*pow(a[0],2)*NG*pow(a[4],2) + 23./40.*pow(a[0],2)*
                               NG*pow(a[3],2) - 59913./12800.*pow(a[0],2)*a[1]*a[5] - 39627./12800.
                               *pow(a[0],2)*a[1]*a[4] - 70563./12800.*pow(a[0],2)*a[1]*a[3] + 27./20.*
                               pow(a[0],2)*a[1]*Zeta3*a[5] - 81./100.*pow(a[0],2)*a[1]*Zeta3*a[4] + 27./
                               50.*pow(a[0],2)*a[1]*Zeta3*a[3] + 3./20.*pow(a[0],2)*a[1]*NG*a[5] - 3./4.
                               *pow(a[0],2)*a[1]*NG*a[4] - 3./20.*pow(a[0],2)*a[1]*NG*a[3] + 561./400.*
                               pow(a[0],2)*a[1]*NG*a[2] - 33./25.*pow(a[0],2)*a[1]*NG*a[2]*Zeta3 + 64693./
                               19200.*pow(a[0],2)*pow(a[1],2) - 7857./3200.*pow(a[0],2)*pow(a[1],2)*
                               Zeta3 );

  gamV +=  + pow(a[6],-1) * (  - 149./3600.*pow(a[0],2)*pow(a[1],2)*NG
                               - 63./50.*pow(a[0],2)*pow(a[1],2)*NG*Zeta3 + 1./9.*pow(a[0],2)*pow(a[1],2)*pow(NG,2)
                               - 106083./64000.*pow(a[0],3)*a[5] - 
                               36129./64000.*pow(a[0],3)*a[4] - 128829./64000.*pow(a[0],3)*a[3] + 81./
                               200.*pow(a[0],3)*Zeta3*a[5] - 27./200.*pow(a[0],3)*Zeta3*a[4] + 27./
                               100.*pow(a[0],3)*Zeta3*a[3] - 99./100.*pow(a[0],3)*NG*a[5] - 57./100.
                               *pow(a[0],3)*NG*a[4] - 129./100.*pow(a[0],3)*NG*a[3] + 1683./2000.*
                               pow(a[0],3)*NG*a[2] - 99./125.*pow(a[0],3)*NG*a[2]*Zeta3 + 29779./
                               64000.*pow(a[0],3)*a[1] - 81./320.*pow(a[0],3)*a[1]*Zeta3 + 18001./
                               24000.*pow(a[0],3)*a[1]*NG - 183./250.*pow(a[0],3)*a[1]*NG*Zeta3 + 1./
                               9.*pow(a[0],3)*a[1]*pow(NG,2) + 12321./256000.*pow(a[0],4) - 8019./
                               160000.*pow(a[0],4)*Zeta3 + 12441./16000.*pow(a[0],4)*NG - 171./
                               250.*pow(a[0],4)*NG*Zeta3 + 1./10.*pow(a[0],4)*pow(NG,2) );

  gamV +=  +  ( 2249./32.*pow(a[5],3) - 84*a[4]*pow(a[5],2)
                - 84*pow(a[4],2)*a[5] + 1371./32.*pow(a[4],3) - 84*a[3]*pow(a[5],2)
                - 21./4.*a[3]*a[4]*a[5] - 8751./32.*a[3]*pow(a[4],2) - 84*pow(a[3],2)*
                a[5] - 8751./32.*pow(a[3],2)*a[4] + 1371./32.*pow(a[3],3) + 81./2.*
                Zeta3*pow(a[5],3) + 243./2.*Zeta3*pow(a[4],3) - 54*Zeta3*a[3]*pow(a[4],2)
                - 54*Zeta3*pow(a[3],2)*a[4] + 243./2.*Zeta3*pow(a[3],3) - 1343.
                /4.*a[2]*pow(a[4],2) - 41./2.*a[2]*a[3]*a[4] - 1343./4.*a[2]*pow(a[3],2) + 
                468*a[2]*Zeta3*pow(a[4],2) + 24*a[2]*Zeta3*a[3]*a[4] + 468*a[2]*Zeta3*pow(a[3],2)
                - 455./3.*pow(a[2],2)*a[4] - 455./3.*pow(a[2],2)*a[3] + 12*pow(a[2],2)*Zeta3*a[4]
                + 12*pow(a[2],2)*Zeta3*a[3] + 16*NG*pow(a[2],2)*a[4] + 
                16*NG*pow(a[2],2)*a[3] + 2187./32.*a[1]*pow(a[5],2) + 27./4.*a[1]*a[4]*
                a[5] + 6777./32.*a[1]*pow(a[4],2) + 27./4.*a[1]*a[3]*a[5] + 819./16.*
                a[1]*a[3]*a[4] + 6777./32.*a[1]*pow(a[3],2) - 117./2.*a[1]*Zeta3*pow(a[5],2) -
                351./2.*a[1]*Zeta3*pow(a[4],2) - 81./2.*a[1]*Zeta3*a[3]*a[4]
                - 351./2.*a[1]*Zeta3*pow(a[3],2) + 489./8.*a[1]*a[2]*a[4] + 489./8.*a[1]*
                a[2]*a[3] );

  gamV +=  +  (  - 54*a[1]*a[2]*Zeta3*a[4] - 54*a[1]*a[2]*Zeta3*a[3]
                 + 2367./256.*pow(a[1],2)*a[5] + 7101./256.*pow(a[1],2)*a[4] + 7101./
                 256.*pow(a[1],2)*a[3] + 153./8.*pow(a[1],2)*Zeta3*a[5] + 459./8.*
                 pow(a[1],2)*Zeta3*a[4] + 459./8.*pow(a[1],2)*Zeta3*a[3] + 21./16.*pow(a[1],2)*NG*a[5]
                 + 63./16.*pow(a[1],2)*NG*a[4] + 63./16.*pow(a[1],2)*NG
                 *a[3] - 135./8.*pow(a[1],2)*NG*a[2] + 18*pow(a[1],2)*NG*a[2]*Zeta3 + 
                 53563./1152.*pow(a[1],3) - 3807./32.*pow(a[1],3)*Zeta3 - 4163./144.
                 *pow(a[1],3)*NG - 45./2.*pow(a[1],3)*NG*Zeta3 - 35./18.*pow(a[1],3)*
                 pow(NG,2) - 2169./160.*a[0]*pow(a[5],2) + 27./20.*a[0]*a[4]*a[5] + 
                 8273./160.*a[0]*pow(a[4],2) + 27./20.*a[0]*a[3]*a[5] + 929./80.*a[0]*a[3]*
                 a[4] + 3677./160.*a[0]*pow(a[3],2) + 243./10.*a[0]*Zeta3*pow(a[5],2)
                 - 531./10.*a[0]*Zeta3*pow(a[4],2) + 3./10.*a[0]*Zeta3*a[3]*a[4] - 27./2.
                 *a[0]*Zeta3*pow(a[3],2) + 991./120.*a[0]*a[2]*a[4] + 2419./120.*a[0]*a[2]*a[3]
                 - 6*a[0]*a[2]*Zeta3*a[4] - 102./5.*a[0]*a[2]*Zeta3*a[3] + 15633./640.*a[0]*
                 a[1]*a[5] + 15459./640.*a[0]*a[1]*a[4] + 29223./640.*a[0]*a[1]*a[3] - 243./
                 10.*a[0]*a[1]*Zeta3*a[5] );

  gamV +=  +  (  - 18./5.*a[0]*a[1]*Zeta3*a[4] - 711./20.*a[0]*a[1]
                 *Zeta3*a[3] - 3849./128.*a[0]*pow(a[1],2) + 279./160.*a[0]*pow(a[1],2)*
                 Zeta3 - 27./8.*a[0]*pow(a[1],2)*NG + 9./10.*a[0]*pow(a[1],2)*NG*Zeta3
                 - 369./6400.*pow(a[0],2)*a[5] + 175399./19200.*pow(a[0],2)*a[4] + 
                 101791./19200.*pow(a[0],2)*a[3] + 2079./200.*pow(a[0],2)*Zeta3*a[5]
                 + 177./200.*pow(a[0],2)*Zeta3*a[4] + 2247./200.*pow(a[0],2)*Zeta3*
                 a[3] + 117./80.*pow(a[0],2)*NG*a[5] + 31./80.*pow(a[0],2)*NG*a[4] + 
                 127./80.*pow(a[0],2)*NG*a[3] - 99./40.*pow(a[0],2)*NG*a[2] + 66./25.*
                 pow(a[0],2)*NG*a[2]*Zeta3 - 25767./1600.*pow(a[0],2)*a[1] - 1809./800.
                 *pow(a[0],2)*a[1]*Zeta3 - 243./80.*pow(a[0],2)*a[1]*NG + 27./50.*pow(a[0],2)*a[1]*NG*Zeta3
                 - 9323./4000.*pow(a[0],3) - 1863./4000.*pow(a[0],3)*Zeta3
                 - 1523./600.*pow(a[0],3)*NG + 57./50.*pow(a[0],3)*NG*
                 Zeta3 - 7./18.*pow(a[0],3)*pow(NG,2) );

  gamV +=  + a[6] * (  - 1173./8.*pow(a[5],2) + 54*a[4]*a[5]
                       - 3087./8.*pow(a[4],2) + 54*a[3]*a[5] - 549./4.*a[3]*a[4] - 3087./8.*
                       pow(a[3],2) - 90*Zeta3*pow(a[5],2) - 270*Zeta3*pow(a[4],2) + 324*
                       Zeta3*a[3]*a[4] - 270*Zeta3*pow(a[3],2) + 306*a[2]*a[4] + 306*a[2]*a[3] - 
                       288*a[2]*Zeta3*a[4] - 288*a[2]*Zeta3*a[3] - 237./16.*a[1]*a[5] - 711./16.
                       *a[1]*a[4] - 711./16.*a[1]*a[3] + 18*a[1]*Zeta3*a[5] + 54*a[1]*Zeta3*a[4] + 
                       54*a[1]*Zeta3*a[3] + 3531./64.*pow(a[1],2) + 351./2.*pow(a[1],2)*Zeta3
                       + 129./4.*pow(a[1],2)*NG + 1599./80.*a[0]*a[5] - 1323./80.*a[0]*a[4]
                       + 513./80.*a[0]*a[3] - 18*a[0]*Zeta3*a[5] + 18*a[0]*Zeta3*a[4] - 18./5.
                       *a[0]*Zeta3*a[3] + 10881./160.*a[0]*a[1] + 297./5.*a[0]*a[1]*Zeta3 + 43011.
                       /1600.*pow(a[0],2) + 567./50.*pow(a[0],2)*Zeta3 + 129./20.*pow(a[0],2)*NG );
  
  gamV +=  + pow(a[6],2) * (  - 483./4.*a[5] - 1449./4.*a[4]
                              - 1449./4.*a[3] + 411./2.*a[1] - 90*a[1]*Zeta3 + 411./10.*a[0] - 18*
                              a[0]*Zeta3 );
  
  gamV +=  + pow(a[6],3) * (  - 1281 - 1008*Zeta3 );
  
  return gamV;
}



long double BetaMu2::bmu2(const state_type & a, size_t NG)
{
  long double mu2 =  ( a[5] + 3*a[4] + 3*a[3] - 9./4.*a[1] - 9./20.*a[0] );
  
  mu2 +=  + a[6] * ( 6 );
  
  mu2 +=  +  (  - 9./4.*pow(a[5],2) - 27./4.*pow(a[4],2) - 
                21./2.*a[3]*a[4] - 27./4.*pow(a[3],2) + 20*a[2]*a[4] + 20*a[2]*a[3] + 15./8.
                *a[1]*a[5] + 45./8.*a[1]*a[4] + 45./8.*a[1]*a[3] - 385./32.*pow(a[1],2) + 
                5./2.*pow(a[1],2)*NG + 15./8.*a[0]*a[5] + 5./8.*a[0]*a[4] + 17./8.*a[0]*
                a[3] + 9./16.*a[0]*a[1] + 471./800.*pow(a[0],2) + 1./2.*pow(a[0],2)*NG );

  mu2 +=  + a[6] * (  - 12*a[5] - 36*a[4] - 36*a[3] + 36*a[1] + 
                      36./5.*a[0] );

  mu2 +=  + pow(a[6],2) * (  - 30 );

  mu2 +=  +  (  - 233./16.*pow(a[5],3) + 72*a[4]*pow(a[5],2)
                + 72*pow(a[4],2)*a[5] + 1605./16.*pow(a[4],3)
                + 72*a[3]*pow(a[5],2) + 21./2.*a[3]*a[4]*a[5]
                + 4047./16.*a[3]*pow(a[4],2) + 72*pow(a[3],2)*a[5]
                + 4047./16.*pow(a[3],2)*a[4] + 1605./16.*pow(a[3],3) + 15
                *Zeta3*pow(a[5],3) + 45*Zeta3*pow(a[4],3) + 36*Zeta3*a[3]*pow(a[4],2)
                + 36*Zeta3*pow(a[3],2)*a[4] + 45*Zeta3*pow(a[3],3) + 447./2.*
                a[2]*pow(a[4],2) + 41*a[2]*a[3]*a[4] + 447./2.*a[2]*pow(a[3],2) - 360*a[2]*
                Zeta3*pow(a[4],2) - 48*a[2]*Zeta3*a[3]*a[4] - 360*a[2]*Zeta3*pow(a[3],2)
                + 910./3.*pow(a[2],2)*a[4] + 910./3.*pow(a[2],2)*a[3] - 24*pow(a[2],2)*
                Zeta3*a[4] - 24*pow(a[2],2)*Zeta3*a[3] - 32*NG*pow(a[2],2)*a[4] - 32*NG*
                pow(a[2],2)*a[3] - 987./16.*a[1]*pow(a[5],2) - 27./2.*a[1]*a[4]*a[5] - 
                3177./16.*a[1]*pow(a[4],2) - 27./2.*a[1]*a[3]*a[5] - 243./8.*a[1]*a[3]*a[4]
                - 3177./16.*a[1]*pow(a[3],2) + 54*a[1]*Zeta3*pow(a[5],2) + 162*a[1]*
                Zeta3*pow(a[4],2) - 27*a[1]*Zeta3*a[3]*a[4] + 162*a[1]*Zeta3*pow(a[3],2)
                - 489./4.*a[1]*a[2]*a[4] - 489./4.*a[1]*a[2]*a[3] + 108*a[1]*a[2]*Zeta3*a[4] + 
                108*a[1]*a[2]*Zeta3*a[3] );
  
  mu2 +=  +  (  - 255./128.*pow(a[1],2)*a[5] - 765./128.*
                pow(a[1],2)*a[4] - 765./128.*pow(a[1],2)*a[3] - 81./4.*pow(a[1],2)*Zeta3
                *a[5] - 243./4.*pow(a[1],2)*Zeta3*a[4] - 243./4.*pow(a[1],2)*Zeta3*
                a[3] - 21./8.*pow(a[1],2)*NG*a[5] - 63./8.*pow(a[1],2)*NG*a[4] - 63./8.
                *pow(a[1],2)*NG*a[3] + 135./4.*pow(a[1],2)*NG*a[2] - 36*pow(a[1],2)*NG*
                a[2]*Zeta3 - 39415./576.*pow(a[1],3) + 711./16.*pow(a[1],3)*Zeta3 + 
                2867./72.*pow(a[1],3)*NG + 45*pow(a[1],3)*NG*Zeta3 + 35./9.*pow(a[1],3)*pow(NG,2)
                + 873./80.*a[0]*pow(a[5],2) - 27./10.*a[0]*a[4]*a[5]
                - 3201./80.*a[0]*pow(a[4],2) - 27./10.*a[0]*a[3]*a[5] - 929./40.*a[0]*
                a[3]*a[4] - 1293./80.*a[0]*pow(a[3],2) - 108./5.*a[0]*Zeta3*pow(a[5],2)
                + 216./5.*a[0]*Zeta3*pow(a[4],2) - 3./5.*a[0]*Zeta3*a[3]*a[4] + 36./5.*
                a[0]*Zeta3*pow(a[3],2) - 991./60.*a[0]*a[2]*a[4] - 2419./60.*a[0]*a[2]*a[3] + 
                12*a[0]*a[2]*Zeta3*a[4] + 204./5.*a[0]*a[2]*Zeta3*a[3] - 6993./320.*a[0]*a[1]*
                a[5] - 519./64.*a[0]*a[1]*a[4] - 9831./320.*a[0]*a[1]*a[3] + 27*a[0]*a[1]*
                Zeta3*a[5] + 351./10.*a[0]*a[1]*Zeta3*a[3] + 8073./320.*a[0]*pow(a[1],2)
                - 243./16.*a[0]*pow(a[1],2)*Zeta3 );

  mu2 +=  +  ( 63./20.*a[0]*pow(a[1],2)*NG - 9./5.*a[0]*pow(a[1],2)*NG*Zeta3
               - 32463./3200.*pow(a[0],2)*a[5] - 79207./9600.*
               pow(a[0],2)*a[4] - 123103./9600.*pow(a[0],2)*a[3] - 27./20.*pow(a[0],2)*
               Zeta3*a[5] - 21./20.*pow(a[0],2)*Zeta3*a[4] - 447./100.*pow(a[0],2)*
               Zeta3*a[3] - 117./40.*pow(a[0],2)*NG*a[5] - 31./40.*pow(a[0],2)*NG*
               a[4] - 127./40.*pow(a[0],2)*NG*a[3] + 99./20.*pow(a[0],2)*NG*a[2] - 132./
               25.*pow(a[0],2)*NG*a[2]*Zeta3 + 9477./800.*pow(a[0],2)*a[1] - 1863./
               400.*pow(a[0],2)*a[1]*Zeta3 + 99./40.*pow(a[0],2)*a[1]*NG - 27./25.*
               pow(a[0],2)*a[1]*NG*Zeta3 + 839./500.*pow(a[0],3) - 1377./2000.*pow(a[0],3)*Zeta3
               + 35./12.*pow(a[0],3)*NG - 57./25.*pow(a[0],3)*NG*
               Zeta3 + 7./9.*pow(a[0],3)*pow(NG,2) );

  mu2 +=  + a[6] * ( 261./4.*pow(a[5],2) - 108*a[4]*a[5] + 
                     351./4.*pow(a[4],2) - 108*a[3]*a[5] - 315./2.*a[3]*a[4] + 351./4.*pow(a[3],2)
                     + 72*Zeta3*pow(a[5],2) + 216*Zeta3*pow(a[4],2) - 216*Zeta3
                     *a[3]*a[4] + 216*Zeta3*pow(a[3],2) - 612*a[2]*a[4] - 612*a[2]*a[3] + 576*a[2]*
                     Zeta3*a[4] + 576*a[2]*Zeta3*a[3] + 189./8.*a[1]*a[5] + 567./8.*a[1]*a[4]
                     + 567./8.*a[1]*a[3] - 108*a[1]*Zeta3*a[5] - 324*a[1]*Zeta3*a[4] - 324*
                     a[1]*Zeta3*a[3] + 11511./32.*pow(a[1],2) - 162*pow(a[1],2)*Zeta3 - 153.
                     /2.*pow(a[1],2)*NG - 1647./40.*a[0]*a[5] + 1179./40.*a[0]*a[4] - 657./
                     40.*a[0]*a[3] + 108./5.*a[0]*Zeta3*a[5] - 396./5.*a[0]*Zeta3*a[4] - 36*
                     a[0]*Zeta3*a[3] - 5103./80.*a[0]*a[1] + 108./5.*a[0]*a[1]*Zeta3 - 9693./
                     800.*pow(a[0],2) - 162./25.*pow(a[0],2)*Zeta3 - 153./10.*pow(a[0],2)
                     *NG );

  mu2 +=  + pow(a[6],2) * ( 99./2.*a[5] + 297./2.*a[4] + 297./
                            2.*a[3] - 63*a[1] - 108*a[1]*Zeta3 - 63./5.*a[0] - 108./5.*a[0]*Zeta3 );

  mu2 +=  + pow(a[6],3) * ( 1026 );
      
  return mu2;
}

BetaMu2::BetaMu2(size_t NG_) : ng(NG_)
{
  bSM = new BetaSMFull(3,3,3,3,3,3,3,NG_);
}

void BetaMu2::operator() (const state_type &a, state_type &dadt, const double t)
{
  if(a.size() != 8)
    throw std::logic_error("ERROR: for mu^2 running 8 constants in input needed: a1,a2,as,at,ab,atau,alam,mu2");

  bSM->operator()(a, dadt, t);
  
  // add VEV anomalous dimension
  dadt[7] = bmu2(a, ng);
}


BetaVEV::BetaVEV(size_t NG_) : ng(NG_)
{
  bSM = new BetaSMFull(3,3,3,3,3,3,3,NG_);
}

void BetaVEV::operator() (const state_type &a, state_type &dadt, const double t)
{
  if(a.size() != 8)
    throw std::logic_error("ERROR: for v.e.v. running 8 constants in input needed: a1,a2,as,at,ab,atau,alam,v");

  bSM->operator()(a, dadt, t);

  // add VEV anomalous dimension
  dadt[7] = gamv(a, ng);
}



BetaVM::BetaVM(size_t NG_) : ng(NG_)
{
  bSM = new BetaSMFull(3,3,3,3,3,3,3,NG_);
}


void BetaVM::operator() (const state_type &a, state_type &dadt, const double t)
{

  if(a.size() != 9)
    throw std::logic_error("ERROR: for v.e.v. and mu^2 running 9 constants in input needed: a1,a2,as,at,ab,atau,alam,v,mu2");
  
  bSM->operator()(a, dadt, t);
  
  // add VEV anomalous dimension
  dadt[7] = a[7]*BetaVEV::gamv(a, ng);
  // std::cout << "dv = " << BetaVEV::gamv(a, ng) << std::endl;
  // std::cout << "8 ==" << dadt.size() << std::endl;
  
  // add mu^2 anomalous dimension for <m>
  dadt[8] = a[8]/2.*BetaMu2::bmu2(a, ng);
}



